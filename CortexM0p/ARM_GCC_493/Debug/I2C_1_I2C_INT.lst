ARM GAS  C:\Users\Zeus\AppData\Local\Temp\cc6O8YAn.s 			page 1


   1              		.cpu cortex-m0plus
   2              		.fpu softvfp
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 1
  10              		.eabi_attribute 34, 0
  11              		.eabi_attribute 18, 4
  12              		.code	16
  13              		.file	"I2C_1_I2C_INT.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.I2C_1_I2C_ISR,"ax",%progbits
  18              		.align	2
  19              		.global	I2C_1_I2C_ISR
  20              		.code	16
  21              		.thumb_func
  22              		.type	I2C_1_I2C_ISR, %function
  23              	I2C_1_I2C_ISR:
  24              	.LFB1:
  25              		.file 1 "Generated_Source\\PSoC4\\I2C_1_I2C_INT.c"
   1:Generated_Source\PSoC4/I2C_1_I2C_INT.c **** /***************************************************************************//**
   2:Generated_Source\PSoC4/I2C_1_I2C_INT.c **** * \file I2C_1_I2C_INT.c
   3:Generated_Source\PSoC4/I2C_1_I2C_INT.c **** * \version 3.20
   4:Generated_Source\PSoC4/I2C_1_I2C_INT.c **** *
   5:Generated_Source\PSoC4/I2C_1_I2C_INT.c **** * \brief
   6:Generated_Source\PSoC4/I2C_1_I2C_INT.c **** *  This file provides the source code to the Interrupt Service Routine for
   7:Generated_Source\PSoC4/I2C_1_I2C_INT.c **** *  the SCB Component in I2C mode.
   8:Generated_Source\PSoC4/I2C_1_I2C_INT.c **** *
   9:Generated_Source\PSoC4/I2C_1_I2C_INT.c **** * Note:
  10:Generated_Source\PSoC4/I2C_1_I2C_INT.c **** *
  11:Generated_Source\PSoC4/I2C_1_I2C_INT.c **** ********************************************************************************
  12:Generated_Source\PSoC4/I2C_1_I2C_INT.c **** * \copyright
  13:Generated_Source\PSoC4/I2C_1_I2C_INT.c **** * Copyright 2013-2016, Cypress Semiconductor Corporation.  All rights reserved.
  14:Generated_Source\PSoC4/I2C_1_I2C_INT.c **** * You may use this file only in accordance with the license, terms, conditions,
  15:Generated_Source\PSoC4/I2C_1_I2C_INT.c **** * disclaimers, and limitations in the end user license agreement accompanying
  16:Generated_Source\PSoC4/I2C_1_I2C_INT.c **** * the software package with which this file was provided.
  17:Generated_Source\PSoC4/I2C_1_I2C_INT.c **** *******************************************************************************/
  18:Generated_Source\PSoC4/I2C_1_I2C_INT.c **** 
  19:Generated_Source\PSoC4/I2C_1_I2C_INT.c **** #include "I2C_1_PVT.h"
  20:Generated_Source\PSoC4/I2C_1_I2C_INT.c **** #include "I2C_1_I2C_PVT.h"
  21:Generated_Source\PSoC4/I2C_1_I2C_INT.c **** 
  22:Generated_Source\PSoC4/I2C_1_I2C_INT.c **** 
  23:Generated_Source\PSoC4/I2C_1_I2C_INT.c **** 
  24:Generated_Source\PSoC4/I2C_1_I2C_INT.c **** /*******************************************************************************
  25:Generated_Source\PSoC4/I2C_1_I2C_INT.c **** * Function Name: I2C_1_I2C_ISR
  26:Generated_Source\PSoC4/I2C_1_I2C_INT.c **** ****************************************************************************//**
  27:Generated_Source\PSoC4/I2C_1_I2C_INT.c **** *
  28:Generated_Source\PSoC4/I2C_1_I2C_INT.c **** *  Handles the Interrupt Service Routine for the SCB I2C mode.
  29:Generated_Source\PSoC4/I2C_1_I2C_INT.c **** *
  30:Generated_Source\PSoC4/I2C_1_I2C_INT.c **** *******************************************************************************/
  31:Generated_Source\PSoC4/I2C_1_I2C_INT.c **** CY_ISR(I2C_1_I2C_ISR)
  32:Generated_Source\PSoC4/I2C_1_I2C_INT.c **** {
ARM GAS  C:\Users\Zeus\AppData\Local\Temp\cc6O8YAn.s 			page 2


  26              		.loc 1 32 0
  27              		.cfi_startproc
  28 0000 10B5     		push	{r4, lr}
  29              		.cfi_def_cfa_offset 8
  30              		.cfi_offset 4, -8
  31              		.cfi_offset 14, -4
  32              	.LVL0:
  33:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****     uint32 diffCount;
  34:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****     uint32 endTransfer;
  35:Generated_Source\PSoC4/I2C_1_I2C_INT.c **** 
  36:Generated_Source\PSoC4/I2C_1_I2C_INT.c **** #ifdef I2C_1_I2C_ISR_ENTRY_CALLBACK
  37:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****     I2C_1_I2C_ISR_EntryCallback();
  38:Generated_Source\PSoC4/I2C_1_I2C_INT.c **** #endif /* I2C_1_I2C_ISR_ENTRY_CALLBACK */
  39:Generated_Source\PSoC4/I2C_1_I2C_INT.c **** 
  40:Generated_Source\PSoC4/I2C_1_I2C_INT.c **** #if (I2C_1_I2C_CUSTOM_ADDRESS_HANDLER_CONST)
  41:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****     uint32 response;
  42:Generated_Source\PSoC4/I2C_1_I2C_INT.c **** 
  43:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****     response = I2C_1_I2C_ACK_ADDR;
  44:Generated_Source\PSoC4/I2C_1_I2C_INT.c **** #endif /* (I2C_1_I2C_CUSTOM_ADDRESS_HANDLER_CONST) */
  45:Generated_Source\PSoC4/I2C_1_I2C_INT.c **** 
  46:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****     endTransfer = 0u; /* Continue active transfer */
  47:Generated_Source\PSoC4/I2C_1_I2C_INT.c **** 
  48:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****     /* Calls customer routine if registered */
  49:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****     if(NULL != I2C_1_customIntrHandler)
  33              		.loc 1 49 0
  34 0002 B94B     		ldr	r3, .L41
  35 0004 1B68     		ldr	r3, [r3]
  36 0006 002B     		cmp	r3, #0
  37 0008 00D0     		beq	.L2
  50:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****     {
  51:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****         I2C_1_customIntrHandler();
  38              		.loc 1 51 0
  39 000a 9847     		blx	r3
  40              	.LVL1:
  41              	.L2:
  52:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****     }
  53:Generated_Source\PSoC4/I2C_1_I2C_INT.c **** 
  54:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****     if(I2C_1_CHECK_INTR_I2C_EC_MASKED(I2C_1_INTR_I2C_EC_WAKE_UP))
  42              		.loc 1 54 0
  43 000c B74B     		ldr	r3, .L41+4
  44 000e 1B68     		ldr	r3, [r3]
  45 0010 DB07     		lsl	r3, r3, #31
  46 0012 02D5     		bpl	.L3
  55:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****     {
  56:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****         /* Mask-off after wakeup */
  57:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****         I2C_1_SetI2CExtClkInterruptMode(I2C_1_NO_INTR_SOURCES);
  47              		.loc 1 57 0
  48 0014 0022     		mov	r2, #0
  49 0016 B64B     		ldr	r3, .L41+8
  50 0018 1A60     		str	r2, [r3]
  51              	.L3:
  58:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****     }
  59:Generated_Source\PSoC4/I2C_1_I2C_INT.c **** 
  60:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****     /* Master and Slave error tracking:
  61:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****     * Add the master state check to track only the master errors when the master is active or
  62:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****     * track slave errors when the slave is active or idle.
  63:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****     * A special MMS case: in the address phase with misplaced Start: the master sets the LOST_ARB a
ARM GAS  C:\Users\Zeus\AppData\Local\Temp\cc6O8YAn.s 			page 3


  64:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****     * slave BUS_ERR. The valid event is LOST_ARB comes from the master.
  65:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****     */
  66:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****     if(I2C_1_CHECK_I2C_FSM_MASTER)
  52              		.loc 1 66 0
  53 001a B64B     		ldr	r3, .L41+12
  54 001c 1B78     		ldrb	r3, [r3]
  55 001e 9B06     		lsl	r3, r3, #26
  56 0020 28D5     		bpl	.L32
  67:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****     {
  68:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****         #if(I2C_1_I2C_MASTER)
  69:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****         {
  70:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****             /* INTR_MASTER_I2C_BUS_ERROR:
  71:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****             * A misplaced Start or Stop condition occurred on the bus: complete the transaction.
  72:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****             * The interrupt is cleared in I2C_FSM_EXIT_IDLE.
  73:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****             */
  74:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****             if(I2C_1_CHECK_INTR_MASTER_MASKED(I2C_1_INTR_MASTER_I2C_BUS_ERROR))
  57              		.loc 1 74 0
  58 0022 B54B     		ldr	r3, .L41+16
  59 0024 1B68     		ldr	r3, [r3]
  60 0026 DB05     		lsl	r3, r3, #23
  61 0028 07D5     		bpl	.L33
  75:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****             {
  76:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                 I2C_1_mstrStatus |= (uint16) (I2C_1_I2C_MSTAT_ERR_XFER |
  62              		.loc 1 76 0
  63 002a B44A     		ldr	r2, .L41+20
  64 002c 1188     		ldrh	r1, [r2]
  65 002e C023     		mov	r3, #192
  66 0030 9B00     		lsl	r3, r3, #2
  67 0032 0B43     		orr	r3, r1
  68 0034 1380     		strh	r3, [r2]
  69              	.LVL2:
  77:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                                                          I2C_1_I2C_MSTAT_ERR_BUS_ERROR);
  78:Generated_Source\PSoC4/I2C_1_I2C_INT.c **** 
  79:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                 endTransfer = I2C_1_I2C_CMPLT_ANY_TRANSFER;
  70              		.loc 1 79 0
  71 0036 0123     		mov	r3, #1
  72 0038 00E0     		b	.L5
  73              	.LVL3:
  74              	.L33:
  46:Generated_Source\PSoC4/I2C_1_I2C_INT.c **** 
  75              		.loc 1 46 0
  76 003a 0023     		mov	r3, #0
  77              	.LVL4:
  78              	.L5:
  80:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****             }
  81:Generated_Source\PSoC4/I2C_1_I2C_INT.c **** 
  82:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****             /* INTR_MASTER_I2C_ARB_LOST:
  83:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****             * The MultiMaster lost arbitrage during transaction.
  84:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****             * A Misplaced Start or Stop condition is treated as lost arbitration when the master dr
  85:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****             * The interrupt source is cleared in I2C_FSM_EXIT_IDLE.
  86:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****             */
  87:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****             if(I2C_1_CHECK_INTR_MASTER_MASKED(I2C_1_INTR_MASTER_I2C_ARB_LOST))
  79              		.loc 1 87 0
  80 003c AE4A     		ldr	r2, .L41+16
  81 003e 1268     		ldr	r2, [r2]
  82 0040 D207     		lsl	r2, r2, #31
  83 0042 06D5     		bpl	.L6
ARM GAS  C:\Users\Zeus\AppData\Local\Temp\cc6O8YAn.s 			page 4


  88:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****             {
  89:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                 I2C_1_mstrStatus |= (uint16) (I2C_1_I2C_MSTAT_ERR_XFER |
  84              		.loc 1 89 0
  85 0044 AD4A     		ldr	r2, .L41+20
  86 0046 1188     		ldrh	r1, [r2]
  87 0048 9023     		mov	r3, #144
  88              	.LVL5:
  89 004a 9B00     		lsl	r3, r3, #2
  90 004c 0B43     		orr	r3, r1
  91 004e 1380     		strh	r3, [r2]
  92              	.LVL6:
  90:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                                                          I2C_1_I2C_MSTAT_ERR_ARB_LOST);
  91:Generated_Source\PSoC4/I2C_1_I2C_INT.c **** 
  92:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                 endTransfer = I2C_1_I2C_CMPLT_ANY_TRANSFER;
  93              		.loc 1 92 0
  94 0050 0123     		mov	r3, #1
  95              	.LVL7:
  96              	.L6:
  93:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****             }
  94:Generated_Source\PSoC4/I2C_1_I2C_INT.c **** 
  95:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****             #if(I2C_1_I2C_MULTI_MASTER_SLAVE)
  96:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****             {
  97:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                 /* I2C_MASTER_CMD_M_START_ON_IDLE:
  98:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                 * MultiMaster-Slave does not generate start, because Slave was addressed.
  99:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                 * Pass control to slave.
 100:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                 */
 101:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                 if(I2C_1_CHECK_I2C_MASTER_CMD(I2C_1_I2C_MASTER_CMD_M_START_ON_IDLE))
 102:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                 {
 103:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                     I2C_1_mstrStatus |= (uint16) (I2C_1_I2C_MSTAT_ERR_XFER |
 104:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                                                              I2C_1_I2C_MSTAT_ERR_ABORT_XFER);
 105:Generated_Source\PSoC4/I2C_1_I2C_INT.c **** 
 106:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                     endTransfer = I2C_1_I2C_CMPLT_ANY_TRANSFER;
 107:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                 }
 108:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****             }
 109:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****             #endif
 110:Generated_Source\PSoC4/I2C_1_I2C_INT.c **** 
 111:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****             /* The error handling common part:
 112:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****             * Sets a completion flag of the master transaction and passes control to:
 113:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****             *  - I2C_FSM_EXIT_IDLE - to complete transaction in case of: ARB_LOST or BUS_ERR.
 114:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****             *  - I2C_FSM_IDLE      - to take chance for the slave to process incoming transaction.
 115:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****             */
 116:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****             if(0u != endTransfer)
  97              		.loc 1 116 0
  98 0052 002B     		cmp	r3, #0
  99 0054 0FD0     		beq	.L4
 117:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****             {
 118:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                 /* Set completion flags for master */
 119:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                 I2C_1_mstrStatus |= (uint16) I2C_1_GET_I2C_MSTAT_CMPLT;
 100              		.loc 1 119 0
 101 0056 A74A     		ldr	r2, .L41+12
 102 0058 1278     		ldrb	r2, [r2]
 103 005a D207     		lsl	r2, r2, #31
 104 005c 01D5     		bpl	.L34
 105 005e 0122     		mov	r2, #1
 106 0060 00E0     		b	.L7
 107              	.L34:
 108 0062 0222     		mov	r2, #2
ARM GAS  C:\Users\Zeus\AppData\Local\Temp\cc6O8YAn.s 			page 5


 109              	.L7:
 110              		.loc 1 119 0 is_stmt 0 discriminator 4
 111 0064 A549     		ldr	r1, .L41+20
 112 0066 0888     		ldrh	r0, [r1]
 113 0068 0243     		orr	r2, r0
 114 006a 0A80     		strh	r2, [r1]
 120:Generated_Source\PSoC4/I2C_1_I2C_INT.c **** 
 121:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                 #if(I2C_1_I2C_MULTI_MASTER_SLAVE)
 122:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                 {
 123:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                     if(I2C_1_CHECK_I2C_FSM_ADDR)
 124:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                     {
 125:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                         /* Start generation is set after another master starts accessing Slave.
 126:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                         * Clean-up master and turn to slave. Set state to IDLE.
 127:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                         */
 128:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                         if(I2C_1_CHECK_I2C_MASTER_CMD(I2C_1_I2C_MASTER_CMD_M_START_ON_IDLE))
 129:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                         {
 130:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                             I2C_1_I2C_MASTER_CLEAR_START;
 131:Generated_Source\PSoC4/I2C_1_I2C_INT.c **** 
 132:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                             endTransfer = I2C_1_I2C_CMPLT_ANY_TRANSFER; /* Pass control to Slave */
 133:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                         }
 134:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                         /* Valid arbitration lost on the address phase happens only when: master LO
 135:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                         * slave BUS_ERR is cleared. Only in that case set the state to IDLE without
 136:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                         */
 137:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                         else if((!I2C_1_CHECK_INTR_SLAVE_MASKED(I2C_1_INTR_SLAVE_I2C_BUS_ERROR))
 138:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                                && I2C_1_CHECK_INTR_MASTER_MASKED(I2C_1_INTR_MASTER_I2C_ARB_LOST))
 139:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                         {
 140:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                             endTransfer = I2C_1_I2C_CMPLT_ANY_TRANSFER; /* Pass control to Slave */
 141:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                         }
 142:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                         else
 143:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                         {
 144:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                             endTransfer = 0u; /* Causes I2C_FSM_EXIT_IDLE to be set below */
 145:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                         }
 146:Generated_Source\PSoC4/I2C_1_I2C_INT.c **** 
 147:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                         if(0u != endTransfer) /* Clean-up master to proceed with slave */
 148:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                         {
 149:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                             I2C_1_CLEAR_TX_FIFO; /* Shifter keeps address, clear it */
 150:Generated_Source\PSoC4/I2C_1_I2C_INT.c **** 
 151:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                             I2C_1_DISABLE_MASTER_AUTO_DATA_ACK; /* In case of reading disable autoA
 152:Generated_Source\PSoC4/I2C_1_I2C_INT.c **** 
 153:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                             /* Clean-up master interrupt sources */
 154:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                             I2C_1_ClearMasterInterruptSource(I2C_1_INTR_MASTER_ALL);
 155:Generated_Source\PSoC4/I2C_1_I2C_INT.c **** 
 156:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                             /* Disable data processing interrupts: they have to be cleared before *
 157:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                             I2C_1_SetRxInterruptMode(I2C_1_NO_INTR_SOURCES);
 158:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                             I2C_1_SetTxInterruptMode(I2C_1_NO_INTR_SOURCES);
 159:Generated_Source\PSoC4/I2C_1_I2C_INT.c **** 
 160:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                             I2C_1_state = I2C_1_I2C_FSM_IDLE;
 161:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                         }
 162:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                         else
 163:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                         {
 164:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                             /* Set I2C_FSM_EXIT_IDLE for BUS_ERR and ARB_LOST (that is really bus e
 165:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                             I2C_1_state = I2C_1_I2C_FSM_EXIT_IDLE;
 166:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                         }
 167:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                     }
 168:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                     else
 169:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                     {
 170:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                         /* Set I2C_FSM_EXIT_IDLE if any other state than address */
ARM GAS  C:\Users\Zeus\AppData\Local\Temp\cc6O8YAn.s 			page 6


 171:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                         I2C_1_state = I2C_1_I2C_FSM_EXIT_IDLE;
 172:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                     }
 173:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                 }
 174:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                 #else
 175:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                 {
 176:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                     /* In case of LOST*/
 177:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                     I2C_1_state = I2C_1_I2C_FSM_EXIT_IDLE;
 115              		.loc 1 177 0 is_stmt 1 discriminator 4
 116 006c 0021     		mov	r1, #0
 117 006e A14A     		ldr	r2, .L41+12
 118 0070 1170     		strb	r1, [r2]
 119 0072 00E0     		b	.L4
 120              	.LVL8:
 121              	.L32:
  46:Generated_Source\PSoC4/I2C_1_I2C_INT.c **** 
 122              		.loc 1 46 0
 123 0074 0023     		mov	r3, #0
 124              	.LVL9:
 125              	.L4:
 178:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                 }
 179:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                 #endif
 180:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****             }
 181:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****         }
 182:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****         #endif
 183:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****     }
 184:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****     else /* (I2C_1_CHECK_I2C_FSM_SLAVE) */
 185:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****     {
 186:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****         #if(I2C_1_I2C_SLAVE)
 187:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****         {
 188:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****             /* INTR_SLAVE_I2C_BUS_ERROR or I2C_1_INTR_SLAVE_I2C_ARB_LOST:
 189:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****             * A Misplaced Start or Stop condition occurred on the bus: set a flag
 190:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****             * to notify an error condition.
 191:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****             */
 192:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****             if(I2C_1_CHECK_INTR_SLAVE_MASKED(I2C_1_INTR_SLAVE_I2C_BUS_ERROR |
 193:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                                                         I2C_1_INTR_SLAVE_I2C_ARB_LOST))
 194:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****             {
 195:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                 if(I2C_1_CHECK_I2C_FSM_RD)
 196:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                 {
 197:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                     /* TX direction: master reads from slave */
 198:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                     I2C_1_slStatus &= (uint8) ~I2C_1_I2C_SSTAT_RD_BUSY;
 199:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                     I2C_1_slStatus |= (uint8) (I2C_1_I2C_SSTAT_RD_ERR |
 200:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                                                           I2C_1_I2C_SSTAT_RD_CMPLT);
 201:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                 }
 202:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                 else
 203:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                 {
 204:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                     /* RX direction: master writes into slave */
 205:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                     I2C_1_slStatus &= (uint8) ~I2C_1_I2C_SSTAT_WR_BUSY;
 206:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                     I2C_1_slStatus |= (uint8) (I2C_1_I2C_SSTAT_WR_ERR |
 207:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                                                           I2C_1_I2C_SSTAT_WR_CMPLT);
 208:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                 }
 209:Generated_Source\PSoC4/I2C_1_I2C_INT.c **** 
 210:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                 I2C_1_state = I2C_1_I2C_FSM_EXIT_IDLE;
 211:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****             }
 212:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****         }
 213:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****         #endif
 214:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****     }
 215:Generated_Source\PSoC4/I2C_1_I2C_INT.c **** 
ARM GAS  C:\Users\Zeus\AppData\Local\Temp\cc6O8YAn.s 			page 7


 216:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****     /* States description:
 217:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****     * Any Master operation starts from: the ADDR_RD/WR state as the master generates traffic on the
 218:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****     * Any Slave operation starts from: the IDLE state as the slave always waits for actions from th
 219:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****     */
 220:Generated_Source\PSoC4/I2C_1_I2C_INT.c **** 
 221:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****     /* FSM Master */
 222:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****     if(I2C_1_CHECK_I2C_FSM_MASTER)
 126              		.loc 1 222 0
 127 0076 9F4A     		ldr	r2, .L41+12
 128 0078 1278     		ldrb	r2, [r2]
 129 007a 9206     		lsl	r2, r2, #26
 130 007c 00D4     		bmi	.LCB127
 131 007e 17E1     		b	.L8	@long jump
 132              	.LCB127:
 223:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****     {
 224:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****         #if(I2C_1_I2C_MASTER)
 225:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****         {
 226:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****             /* INTR_MASTER_I2C_STOP:
 227:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****             * A Stop condition was generated by the master: the end of the transaction.
 228:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****             * Set completion flags to notify the API.
 229:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****             */
 230:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****             if(I2C_1_CHECK_INTR_MASTER_MASKED(I2C_1_INTR_MASTER_I2C_STOP))
 133              		.loc 1 230 0
 134 0080 9D4A     		ldr	r2, .L41+16
 135 0082 1268     		ldr	r2, [r2]
 136 0084 D206     		lsl	r2, r2, #27
 137 0086 11D5     		bpl	.L9
 231:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****             {
 232:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                 I2C_1_ClearMasterInterruptSource(I2C_1_INTR_MASTER_I2C_STOP);
 138              		.loc 1 232 0
 139 0088 1022     		mov	r2, #16
 140 008a 9D4B     		ldr	r3, .L41+24
 141              	.LVL10:
 142 008c 1A60     		str	r2, [r3]
 233:Generated_Source\PSoC4/I2C_1_I2C_INT.c **** 
 234:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                 I2C_1_mstrStatus |= (uint16) I2C_1_GET_I2C_MSTAT_CMPLT;
 143              		.loc 1 234 0
 144 008e 994B     		ldr	r3, .L41+12
 145 0090 1B78     		ldrb	r3, [r3]
 146 0092 DB07     		lsl	r3, r3, #31
 147 0094 01D5     		bpl	.L35
 148 0096 0123     		mov	r3, #1
 149 0098 00E0     		b	.L10
 150              	.L35:
 151 009a 0223     		mov	r3, #2
 152              	.L10:
 153              		.loc 1 234 0 is_stmt 0 discriminator 4
 154 009c 974A     		ldr	r2, .L41+20
 155 009e 1188     		ldrh	r1, [r2]
 156 00a0 0B43     		orr	r3, r1
 157 00a2 1380     		strh	r3, [r2]
 235:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                 I2C_1_state       = I2C_1_I2C_FSM_IDLE;
 158              		.loc 1 235 0 is_stmt 1 discriminator 4
 159 00a4 1022     		mov	r2, #16
 160 00a6 934B     		ldr	r3, .L41+12
 161 00a8 1A70     		strb	r2, [r3]
 162 00aa 1BE1     		b	.L1
ARM GAS  C:\Users\Zeus\AppData\Local\Temp\cc6O8YAn.s 			page 8


 163              	.LVL11:
 164              	.L9:
 236:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****             }
 237:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****             else
 238:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****             {
 239:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                 if(I2C_1_CHECK_I2C_FSM_ADDR) /* Address stage */
 165              		.loc 1 239 0
 166 00ac 914A     		ldr	r2, .L41+12
 167 00ae 1278     		ldrb	r2, [r2]
 168 00b0 1207     		lsl	r2, r2, #28
 169 00b2 20D5     		bpl	.L12
 240:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                 {
 241:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                     /* INTR_MASTER_I2C_NACK:
 242:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                     * The master sent an address but it was NACKed by the slave. Complete transacti
 243:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                     */
 244:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                     if(I2C_1_CHECK_INTR_MASTER_MASKED(I2C_1_INTR_MASTER_I2C_NACK))
 170              		.loc 1 244 0
 171 00b4 904A     		ldr	r2, .L41+16
 172 00b6 1268     		ldr	r2, [r2]
 173 00b8 9207     		lsl	r2, r2, #30
 174 00ba 0AD5     		bpl	.L13
 245:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                     {
 246:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                         I2C_1_ClearMasterInterruptSource(I2C_1_INTR_MASTER_I2C_NACK);
 175              		.loc 1 246 0
 176 00bc 0222     		mov	r2, #2
 177 00be 904B     		ldr	r3, .L41+24
 178              	.LVL12:
 179 00c0 1A60     		str	r2, [r3]
 247:Generated_Source\PSoC4/I2C_1_I2C_INT.c **** 
 248:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                         I2C_1_mstrStatus |= (uint16) (I2C_1_I2C_MSTAT_ERR_XFER |
 180              		.loc 1 248 0
 181 00c2 8E4A     		ldr	r2, .L41+20
 182 00c4 1188     		ldrh	r1, [r2]
 183 00c6 8823     		mov	r3, #136
 184 00c8 9B00     		lsl	r3, r3, #2
 185 00ca 0B43     		orr	r3, r1
 186 00cc 1380     		strh	r3, [r2]
 187              	.LVL13:
 249:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                                                                  I2C_1_I2C_MSTAT_ERR_ADDR_NAK);
 250:Generated_Source\PSoC4/I2C_1_I2C_INT.c **** 
 251:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                         endTransfer = I2C_1_I2C_CMPLT_ANY_TRANSFER;
 188              		.loc 1 251 0
 189 00ce 0123     		mov	r3, #1
 190 00d0 11E0     		b	.L12
 191              	.LVL14:
 192              	.L13:
 252:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                     }
 253:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                     /* INTR_TX_UNDERFLOW. The master sent an address:
 254:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                     *  - TX direction: the clock is stretched after the ACK phase, because the TX F
 255:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                     *    EMPTY. The TX EMPTY cleans all the TX interrupt sources.
 256:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                     *  - RX direction: the 1st byte is received, but there is no ACK permission,
 257:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                     *    the clock is stretched after 1 byte is received.
 258:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                     */
 259:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                     else
 260:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                     {
 261:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                         if(I2C_1_CHECK_I2C_FSM_RD) /* Reading */
 193              		.loc 1 261 0
ARM GAS  C:\Users\Zeus\AppData\Local\Temp\cc6O8YAn.s 			page 9


 194 00d2 884A     		ldr	r2, .L41+12
 195 00d4 1278     		ldrb	r2, [r2]
 196 00d6 D207     		lsl	r2, r2, #31
 197 00d8 03D5     		bpl	.L14
 262:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                         {
 263:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                             I2C_1_state = I2C_1_I2C_FSM_MSTR_RD_DATA;
 198              		.loc 1 263 0
 199 00da 2521     		mov	r1, #37
 200 00dc 854A     		ldr	r2, .L41+12
 201 00de 1170     		strb	r1, [r2]
 202 00e0 09E0     		b	.L12
 203              	.L14:
 264:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                         }
 265:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                         else /* Writing */
 266:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                         {
 267:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                             I2C_1_state = I2C_1_I2C_FSM_MSTR_WR_DATA;
 204              		.loc 1 267 0
 205 00e2 2421     		mov	r1, #36
 206 00e4 834A     		ldr	r2, .L41+12
 207 00e6 1170     		strb	r1, [r2]
 268:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                             if(0u != I2C_1_mstrWrBufSize)
 208              		.loc 1 268 0
 209 00e8 864A     		ldr	r2, .L41+28
 210 00ea 1268     		ldr	r2, [r2]
 211 00ec 002A     		cmp	r2, #0
 212 00ee 02D0     		beq	.L12
 269:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                             {
 270:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                                 /* Enable INTR.TX_EMPTY if there is data to transmit */
 271:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                                 I2C_1_SetTxInterruptMode(I2C_1_INTR_TX_EMPTY);
 213              		.loc 1 271 0
 214 00f0 1439     		sub	r1, r1, #20
 215 00f2 854A     		ldr	r2, .L41+32
 216 00f4 1160     		str	r1, [r2]
 217              	.LVL15:
 218              	.L12:
 272:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                             }
 273:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                         }
 274:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                     }
 275:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                 }
 276:Generated_Source\PSoC4/I2C_1_I2C_INT.c **** 
 277:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                 if(I2C_1_CHECK_I2C_FSM_DATA) /* Data phase */
 219              		.loc 1 277 0
 220 00f6 7F4A     		ldr	r2, .L41+12
 221 00f8 1278     		ldrb	r2, [r2]
 222 00fa 5207     		lsl	r2, r2, #29
 223 00fc 00D4     		bmi	.LCB237
 224 00fe AEE0     		b	.L15	@long jump
 225              	.LCB237:
 278:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                 {
 279:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                     if(I2C_1_CHECK_I2C_FSM_RD) /* Reading */
 226              		.loc 1 279 0
 227 0100 7C4A     		ldr	r2, .L41+12
 228 0102 1278     		ldrb	r2, [r2]
 229 0104 D207     		lsl	r2, r2, #31
 230 0106 49D5     		bpl	.L16
 280:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                     {
 281:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                         /* INTR_RX_FULL:
ARM GAS  C:\Users\Zeus\AppData\Local\Temp\cc6O8YAn.s 			page 10


 282:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                         * RX direction: the master received 8 bytes.
 283:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                         * Get data from RX FIFO and decide whether to ACK or  NACK the following by
 284:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                         */
 285:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                         if(I2C_1_CHECK_INTR_RX_MASKED(I2C_1_INTR_RX_FULL))
 231              		.loc 1 285 0
 232 0108 804A     		ldr	r2, .L41+36
 233 010a 1268     		ldr	r2, [r2]
 234 010c 1207     		lsl	r2, r2, #28
 235 010e 27D5     		bpl	.L17
 286:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                         {
 287:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                             /* Calculate difference */
 288:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                             diffCount =  I2C_1_mstrRdBufSize -
 236              		.loc 1 288 0
 237 0110 7F4A     		ldr	r2, .L41+40
 238 0112 1268     		ldr	r2, [r2]
 289:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                                         (I2C_1_mstrRdBufIndex + I2C_1_GET_RX_FIFO_ENTRIES);
 239              		.loc 1 289 0
 240 0114 7F49     		ldr	r1, .L41+44
 241 0116 0968     		ldr	r1, [r1]
 242 0118 1F24     		mov	r4, #31
 243 011a 0C40     		and	r4, r1
 244 011c 7E49     		ldr	r1, .L41+48
 245 011e 0968     		ldr	r1, [r1]
 246 0120 6418     		add	r4, r4, r1
 288:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                                         (I2C_1_mstrRdBufIndex + I2C_1_GET_RX_FIFO_ENTRIES);
 247              		.loc 1 288 0
 248 0122 141B     		sub	r4, r2, r4
 249              	.LVL16:
 290:Generated_Source\PSoC4/I2C_1_I2C_INT.c **** 
 291:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                             /* Proceed transaction or end it when RX FIFO becomes FULL again */
 292:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                             if(diffCount > I2C_1_I2C_FIFO_SIZE)
 250              		.loc 1 292 0
 251 0124 082C     		cmp	r4, #8
 252 0126 09D8     		bhi	.L36
 293:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                             {
 294:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                                 diffCount = I2C_1_I2C_FIFO_SIZE;
 295:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                             }
 296:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                             else
 297:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                             {
 298:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                                 if(0u == diffCount)
 253              		.loc 1 298 0
 254 0128 002C     		cmp	r4, #0
 255 012a 16D1     		bne	.L19
 299:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                                 {
 300:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                                     I2C_1_DISABLE_MASTER_AUTO_DATA_ACK;
 256              		.loc 1 300 0
 257 012c 7B4A     		ldr	r2, .L41+52
 258 012e 1168     		ldr	r1, [r2]
 259 0130 7B4B     		ldr	r3, .L41+56
 260              	.LVL17:
 261 0132 0B40     		and	r3, r1
 262 0134 1360     		str	r3, [r2]
 263              	.LVL18:
 301:Generated_Source\PSoC4/I2C_1_I2C_INT.c **** 
 302:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                                     diffCount   = I2C_1_I2C_FIFO_SIZE;
 303:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                                     endTransfer = I2C_1_I2C_CMPLT_ANY_TRANSFER;
 264              		.loc 1 303 0
ARM GAS  C:\Users\Zeus\AppData\Local\Temp\cc6O8YAn.s 			page 11


 265 0136 0123     		mov	r3, #1
 302:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                                     endTransfer = I2C_1_I2C_CMPLT_ANY_TRANSFER;
 266              		.loc 1 302 0
 267 0138 0834     		add	r4, r4, #8
 268 013a 0EE0     		b	.L19
 269              	.LVL19:
 270              	.L36:
 294:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                             }
 271              		.loc 1 294 0
 272 013c 0824     		mov	r4, #8
 273              	.LVL20:
 274 013e 0CE0     		b	.L19
 275              	.LVL21:
 276              	.L20:
 304:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                                 }
 305:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                             }
 306:Generated_Source\PSoC4/I2C_1_I2C_INT.c **** 
 307:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                             for(; (0u != diffCount); diffCount--)
 308:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                             {
 309:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                                 I2C_1_mstrRdBufPtr[I2C_1_mstrRdBufIndex] = (uint8)
 277              		.loc 1 309 0 discriminator 2
 278 0140 754A     		ldr	r2, .L41+48
 279 0142 1168     		ldr	r1, [r2]
 280 0144 7748     		ldr	r0, .L41+60
 281 0146 0068     		ldr	r0, [r0]
 282 0148 4118     		add	r1, r0, r1
 310:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                                                                                         I2C_1_RX_FI
 283              		.loc 1 310 0 discriminator 2
 284 014a 7748     		ldr	r0, .L41+64
 285 014c 0068     		ldr	r0, [r0]
 309:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                                                                                         I2C_1_RX_FI
 286              		.loc 1 309 0 discriminator 2
 287 014e C0B2     		uxtb	r0, r0
 288 0150 0870     		strb	r0, [r1]
 311:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                                 I2C_1_mstrRdBufIndex++;
 289              		.loc 1 311 0 discriminator 2
 290 0152 1168     		ldr	r1, [r2]
 291 0154 0131     		add	r1, r1, #1
 292 0156 1160     		str	r1, [r2]
 307:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                             {
 293              		.loc 1 307 0 discriminator 2
 294 0158 013C     		sub	r4, r4, #1
 295              	.LVL22:
 296              	.L19:
 307:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                             {
 297              		.loc 1 307 0 is_stmt 0 discriminator 1
 298 015a 002C     		cmp	r4, #0
 299 015c F0D1     		bne	.L20
 300 015e 19E0     		b	.L21
 301              	.LVL23:
 302              	.L17:
 312:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                             }
 313:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                         }
 314:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                         /* INTR_RX_NOT_EMPTY:
 315:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                         * RX direction: the master received one data byte, ACK or NACK it.
 316:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                         * The last byte is stored and NACKed by the master. The NACK and Stop is
 317:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                         * generated by one command generate Stop.
ARM GAS  C:\Users\Zeus\AppData\Local\Temp\cc6O8YAn.s 			page 12


 318:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                         */
 319:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                         else if(I2C_1_CHECK_INTR_RX_MASKED(I2C_1_INTR_RX_NOT_EMPTY))
 303              		.loc 1 319 0 is_stmt 1
 304 0160 6A4A     		ldr	r2, .L41+36
 305 0162 1268     		ldr	r2, [r2]
 306 0164 5207     		lsl	r2, r2, #29
 307 0166 15D5     		bpl	.L21
 320:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                         {
 321:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                             /* Put data in component buffer */
 322:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                             I2C_1_mstrRdBufPtr[I2C_1_mstrRdBufIndex] = (uint8) I2C_1_RX_FIFO_RD_REG
 308              		.loc 1 322 0
 309 0168 6B4A     		ldr	r2, .L41+48
 310 016a 1168     		ldr	r1, [r2]
 311 016c 6D48     		ldr	r0, .L41+60
 312 016e 0068     		ldr	r0, [r0]
 313 0170 4118     		add	r1, r0, r1
 314 0172 6D48     		ldr	r0, .L41+64
 315 0174 0068     		ldr	r0, [r0]
 316 0176 C0B2     		uxtb	r0, r0
 317 0178 0870     		strb	r0, [r1]
 323:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                             I2C_1_mstrRdBufIndex++;
 318              		.loc 1 323 0
 319 017a 1168     		ldr	r1, [r2]
 320 017c 0131     		add	r1, r1, #1
 321 017e 1160     		str	r1, [r2]
 324:Generated_Source\PSoC4/I2C_1_I2C_INT.c **** 
 325:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                             if(I2C_1_mstrRdBufIndex < I2C_1_mstrRdBufSize)
 322              		.loc 1 325 0
 323 0180 1168     		ldr	r1, [r2]
 324 0182 634A     		ldr	r2, .L41+40
 325 0184 1268     		ldr	r2, [r2]
 326 0186 9142     		cmp	r1, r2
 327 0188 03D2     		bcs	.L37
 326:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                             {
 327:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                                 I2C_1_I2C_MASTER_GENERATE_ACK;
 328              		.loc 1 327 0
 329 018a 0421     		mov	r1, #4
 330 018c 674A     		ldr	r2, .L41+68
 331 018e 1160     		str	r1, [r2]
 332 0190 00E0     		b	.L21
 333              	.L37:
 328:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                             }
 329:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                             else
 330:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                             {
 331:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                                endTransfer = I2C_1_I2C_CMPLT_ANY_TRANSFER;
 334              		.loc 1 331 0
 335 0192 0123     		mov	r3, #1
 336              	.LVL24:
 337              	.L21:
 332:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                             }
 333:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                         }
 334:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                         else
 335:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                         {
 336:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                             /* Do nothing */
 337:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                         }
 338:Generated_Source\PSoC4/I2C_1_I2C_INT.c **** 
 339:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                         I2C_1_ClearRxInterruptSource(I2C_1_INTR_RX_ALL);
ARM GAS  C:\Users\Zeus\AppData\Local\Temp\cc6O8YAn.s 			page 13


 338              		.loc 1 339 0
 339 0194 6649     		ldr	r1, .L41+72
 340 0196 674A     		ldr	r2, .L41+76
 341 0198 1160     		str	r1, [r2]
 342 019a 60E0     		b	.L15
 343              	.L16:
 340:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                     }
 341:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                     else /* Writing */
 342:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                     {
 343:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                         /* INTR_MASTER_I2C_NACK :
 344:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                         * The master writes data to the slave and NACK was received: not all the by
 345:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                         * written to the slave from the TX FIFO. Revert the index if there is data 
 346:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                         * the TX FIFO and pass control to a complete transfer.
 347:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                         */
 348:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                         if(I2C_1_CHECK_INTR_MASTER_MASKED(I2C_1_INTR_MASTER_I2C_NACK))
 344              		.loc 1 348 0
 345 019c 564A     		ldr	r2, .L41+16
 346 019e 1268     		ldr	r2, [r2]
 347 01a0 9207     		lsl	r2, r2, #30
 348 01a2 26D5     		bpl	.L22
 349:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                         {
 350:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                             I2C_1_ClearMasterInterruptSource(I2C_1_INTR_MASTER_I2C_NACK);
 349              		.loc 1 350 0
 350 01a4 0222     		mov	r2, #2
 351 01a6 564B     		ldr	r3, .L41+24
 352              	.LVL25:
 353 01a8 1A60     		str	r2, [r3]
 351:Generated_Source\PSoC4/I2C_1_I2C_INT.c **** 
 352:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                             /* Rollback write buffer index: NACKed byte remains in shifter */
 353:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                             I2C_1_mstrWrBufIndexTmp -= (I2C_1_GET_TX_FIFO_ENTRIES +
 354              		.loc 1 353 0
 355 01aa 634A     		ldr	r2, .L41+80
 356 01ac 1368     		ldr	r3, [r2]
 357 01ae 1F21     		mov	r1, #31
 358 01b0 1940     		and	r1, r3
 354:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                                                                    I2C_1_GET_TX_FIFO_SR_VALID);
 359              		.loc 1 354 0
 360 01b2 1368     		ldr	r3, [r2]
 361 01b4 8022     		mov	r2, #128
 362 01b6 1202     		lsl	r2, r2, #8
 363 01b8 1340     		and	r3, r2
 353:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                                                                    I2C_1_GET_TX_FIFO_SR_VALID);
 364              		.loc 1 353 0
 365 01ba 00D0     		beq	.L23
 366 01bc 0123     		mov	r3, #1
 367              	.L23:
 353:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                                                                    I2C_1_GET_TX_FIFO_SR_VALID);
 368              		.loc 1 353 0 is_stmt 0 discriminator 4
 369 01be CB18     		add	r3, r1, r3
 370 01c0 5E4A     		ldr	r2, .L41+84
 371 01c2 1168     		ldr	r1, [r2]
 372 01c4 CB1A     		sub	r3, r1, r3
 373 01c6 1360     		str	r3, [r2]
 355:Generated_Source\PSoC4/I2C_1_I2C_INT.c **** 
 356:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                             /* Update number of transferred bytes */
 357:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                             I2C_1_mstrWrBufIndex = I2C_1_mstrWrBufIndexTmp;
 374              		.loc 1 357 0 is_stmt 1 discriminator 4
ARM GAS  C:\Users\Zeus\AppData\Local\Temp\cc6O8YAn.s 			page 14


 375 01c8 1268     		ldr	r2, [r2]
 376 01ca 5D4B     		ldr	r3, .L41+88
 377 01cc 1A60     		str	r2, [r3]
 358:Generated_Source\PSoC4/I2C_1_I2C_INT.c **** 
 359:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                             I2C_1_mstrStatus |= (uint16) (I2C_1_I2C_MSTAT_ERR_XFER |
 378              		.loc 1 359 0 discriminator 4
 379 01ce 4B4A     		ldr	r2, .L41+20
 380 01d0 1188     		ldrh	r1, [r2]
 381 01d2 8423     		mov	r3, #132
 382 01d4 9B00     		lsl	r3, r3, #2
 383 01d6 0B43     		orr	r3, r1
 384 01d8 1380     		strh	r3, [r2]
 360:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                                                                      I2C_1_I2C_MSTAT_ERR_SHORT_XFER
 361:Generated_Source\PSoC4/I2C_1_I2C_INT.c **** 
 362:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                             I2C_1_CLEAR_TX_FIFO;
 385              		.loc 1 362 0 discriminator 4
 386 01da 5A4B     		ldr	r3, .L41+92
 387 01dc 1A68     		ldr	r2, [r3]
 388 01de 8021     		mov	r1, #128
 389 01e0 4902     		lsl	r1, r1, #9
 390 01e2 0A43     		orr	r2, r1
 391 01e4 1A60     		str	r2, [r3]
 392 01e6 1968     		ldr	r1, [r3]
 393 01e8 574A     		ldr	r2, .L41+96
 394 01ea 0A40     		and	r2, r1
 395 01ec 1A60     		str	r2, [r3]
 396              	.LVL26:
 363:Generated_Source\PSoC4/I2C_1_I2C_INT.c **** 
 364:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                             endTransfer = I2C_1_I2C_CMPLT_ANY_TRANSFER;
 397              		.loc 1 364 0 discriminator 4
 398 01ee 0123     		mov	r3, #1
 399 01f0 35E0     		b	.L15
 400              	.LVL27:
 401              	.L22:
 365:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                         }
 366:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                         /* INTR_TX_EMPTY :
 367:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                         * TX direction: the TX FIFO is EMPTY, the data from the buffer needs to be 
 368:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                         * When there is no data in the component buffer, the underflow interrupt is
 369:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                         * enabled to catch when all the data has been transferred.
 370:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                         */
 371:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                         else if(I2C_1_CHECK_INTR_TX_MASKED(I2C_1_INTR_TX_EMPTY))
 402              		.loc 1 371 0
 403 01f2 564A     		ldr	r2, .L41+100
 404 01f4 1268     		ldr	r2, [r2]
 405 01f6 D206     		lsl	r2, r2, #27
 406 01f8 1ED4     		bmi	.L24
 407 01fa 27E0     		b	.L40
 408              	.L28:
 372:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                         {
 373:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                             while(I2C_1_I2C_FIFO_SIZE != I2C_1_GET_TX_FIFO_ENTRIES)
 374:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                             {
 375:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                                 /* The temporary mstrWrBufIndexTmp is used because slave could NACK
 376:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                                 * roll-back required in this case. The mstrWrBufIndex is updated at
 377:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                                 */
 378:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                                 if(I2C_1_mstrWrBufIndexTmp < I2C_1_mstrWrBufSize)
 409              		.loc 1 378 0
 410 01fc 4F4A     		ldr	r2, .L41+84
ARM GAS  C:\Users\Zeus\AppData\Local\Temp\cc6O8YAn.s 			page 15


 411 01fe 1168     		ldr	r1, [r2]
 412 0200 404A     		ldr	r2, .L41+28
 413 0202 1268     		ldr	r2, [r2]
 414 0204 9142     		cmp	r1, r2
 415 0206 1DD2     		bcs	.L26
 379:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                                 {
 380:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                                 #if(!I2C_1_CY_SCBIP_V0)
 381:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                                    /* Clear INTR_TX.UNDERFLOW before putting the last byte into TX 
 382:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                                     * a proper trigger at the end of transaction when INTR_TX.UNDER
 383:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                                     * event. Ticket ID# 156735.
 384:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                                     */
 385:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                                     if(I2C_1_mstrWrBufIndexTmp == (I2C_1_mstrWrBufSize - 1u))
 416              		.loc 1 385 0
 417 0208 3E4A     		ldr	r2, .L41+28
 418 020a 1268     		ldr	r2, [r2]
 419 020c 013A     		sub	r2, r2, #1
 420 020e 4B49     		ldr	r1, .L41+84
 421 0210 0968     		ldr	r1, [r1]
 422 0212 8A42     		cmp	r2, r1
 423 0214 04D1     		bne	.L27
 386:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                                     {
 387:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                                         I2C_1_ClearTxInterruptSource(I2C_1_INTR_TX_UNDERFLOW);
 424              		.loc 1 387 0
 425 0216 4022     		mov	r2, #64
 426 0218 4D49     		ldr	r1, .L41+104
 427 021a 0A60     		str	r2, [r1]
 388:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                                         I2C_1_SetTxInterruptMode(I2C_1_INTR_TX_UNDERFLOW);
 428              		.loc 1 388 0
 429 021c 3A49     		ldr	r1, .L41+32
 430 021e 0A60     		str	r2, [r1]
 431              	.L27:
 389:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                                     }
 390:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                                  #endif /* (!I2C_1_CY_SCBIP_V0) */
 391:Generated_Source\PSoC4/I2C_1_I2C_INT.c **** 
 392:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                                     /* Put data into TX FIFO */
 393:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                                     I2C_1_TX_FIFO_WR_REG = (uint32) I2C_1_mstrWrBufPtr[I2C_1_mstrWr
 432              		.loc 1 393 0
 433 0220 464A     		ldr	r2, .L41+84
 434 0222 1168     		ldr	r1, [r2]
 435 0224 4B48     		ldr	r0, .L41+108
 436 0226 0068     		ldr	r0, [r0]
 437 0228 4118     		add	r1, r0, r1
 438 022a 0978     		ldrb	r1, [r1]
 439 022c C9B2     		uxtb	r1, r1
 440 022e 4A48     		ldr	r0, .L41+112
 441 0230 0160     		str	r1, [r0]
 394:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                                     I2C_1_mstrWrBufIndexTmp++;
 442              		.loc 1 394 0
 443 0232 1168     		ldr	r1, [r2]
 444 0234 0131     		add	r1, r1, #1
 445 0236 1160     		str	r1, [r2]
 446              	.L24:
 373:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                             {
 447              		.loc 1 373 0
 448 0238 3F4A     		ldr	r2, .L41+80
 449 023a 1268     		ldr	r2, [r2]
 450 023c 1F21     		mov	r1, #31
ARM GAS  C:\Users\Zeus\AppData\Local\Temp\cc6O8YAn.s 			page 16


 451 023e 0A40     		and	r2, r1
 452 0240 082A     		cmp	r2, #8
 453 0242 DBD1     		bne	.L28
 454              	.L26:
 395:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                                 }
 396:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                                 else
 397:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                                 {
 398:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                                     break; /* No more data to put */
 399:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                                 }
 400:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                             }
 401:Generated_Source\PSoC4/I2C_1_I2C_INT.c **** 
 402:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                         #if(I2C_1_CY_SCBIP_V0)
 403:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                             if(I2C_1_mstrWrBufIndexTmp == I2C_1_mstrWrBufSize)
 404:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                             {
 405:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                                 I2C_1_SetTxInterruptMode(I2C_1_INTR_TX_UNDERFLOW);
 406:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                             }
 407:Generated_Source\PSoC4/I2C_1_I2C_INT.c **** 
 408:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                             I2C_1_ClearTxInterruptSource(I2C_1_INTR_TX_ALL);
 409:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                         #else
 410:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                             I2C_1_ClearTxInterruptSource(I2C_1_INTR_TX_EMPTY);
 455              		.loc 1 410 0
 456 0244 1021     		mov	r1, #16
 457 0246 424A     		ldr	r2, .L41+104
 458 0248 1160     		str	r1, [r2]
 459 024a 08E0     		b	.L15
 460              	.L40:
 411:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                         #endif /* (I2C_1_CY_SCBIP_V0) */
 412:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                         }
 413:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                         /* INTR_TX_UNDERFLOW:
 414:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                         * TX direction: all data from the TX FIFO was transferred to the slave.
 415:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                         * The transaction needs to be completed.
 416:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                         */
 417:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                         else if(I2C_1_CHECK_INTR_TX_MASKED(I2C_1_INTR_TX_UNDERFLOW))
 461              		.loc 1 417 0
 462 024c 3F4A     		ldr	r2, .L41+100
 463 024e 1268     		ldr	r2, [r2]
 464 0250 5206     		lsl	r2, r2, #25
 465 0252 04D5     		bpl	.L15
 418:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                         {
 419:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                             /* Update number of transferred bytes */
 420:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                             I2C_1_mstrWrBufIndex = I2C_1_mstrWrBufIndexTmp;
 466              		.loc 1 420 0
 467 0254 394B     		ldr	r3, .L41+84
 468              	.LVL28:
 469 0256 1A68     		ldr	r2, [r3]
 470 0258 394B     		ldr	r3, .L41+88
 471 025a 1A60     		str	r2, [r3]
 472              	.LVL29:
 421:Generated_Source\PSoC4/I2C_1_I2C_INT.c **** 
 422:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                             endTransfer = I2C_1_I2C_CMPLT_ANY_TRANSFER;
 473              		.loc 1 422 0
 474 025c 0123     		mov	r3, #1
 475              	.LVL30:
 476              	.L15:
 423:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                         }
 424:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                         else
 425:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                         {
ARM GAS  C:\Users\Zeus\AppData\Local\Temp\cc6O8YAn.s 			page 17


 426:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                             /* Do nothing */
 427:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                         }
 428:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                     }
 429:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                 }
 430:Generated_Source\PSoC4/I2C_1_I2C_INT.c **** 
 431:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                 if(0u != endTransfer) /* Complete transfer */
 477              		.loc 1 431 0
 478 025e 002B     		cmp	r3, #0
 479 0260 40D0     		beq	.L1
 432:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                 {
 433:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                     /* Clean-up master after reading: only in case of NACK */
 434:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                     I2C_1_DISABLE_MASTER_AUTO_DATA_ACK;
 480              		.loc 1 434 0
 481 0262 2E4A     		ldr	r2, .L41+52
 482 0264 1168     		ldr	r1, [r2]
 483 0266 2E4B     		ldr	r3, .L41+56
 484              	.LVL31:
 485 0268 0B40     		and	r3, r1
 486 026a 1360     		str	r3, [r2]
 435:Generated_Source\PSoC4/I2C_1_I2C_INT.c **** 
 436:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                     /* Disable data processing interrupts: they have to be cleared before */
 437:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                     I2C_1_SetRxInterruptMode(I2C_1_NO_INTR_SOURCES);
 487              		.loc 1 437 0
 488 026c 0023     		mov	r3, #0
 489 026e 3B4A     		ldr	r2, .L41+116
 490 0270 1360     		str	r3, [r2]
 438:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                     I2C_1_SetTxInterruptMode(I2C_1_NO_INTR_SOURCES);
 491              		.loc 1 438 0
 492 0272 254A     		ldr	r2, .L41+32
 493 0274 1360     		str	r3, [r2]
 439:Generated_Source\PSoC4/I2C_1_I2C_INT.c **** 
 440:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                     if(I2C_1_CHECK_I2C_MODE_NO_STOP(I2C_1_mstrControl))
 494              		.loc 1 440 0
 495 0276 3A4B     		ldr	r3, .L41+120
 496 0278 1B78     		ldrb	r3, [r3]
 497 027a 9B07     		lsl	r3, r3, #30
 498 027c 0ED5     		bpl	.L29
 441:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                     {
 442:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                         /* On-going transaction is suspended: the ReStart is generated by the API r
 443:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                         I2C_1_mstrStatus |= (uint16) (I2C_1_I2C_MSTAT_XFER_HALT |
 444:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                                                                  I2C_1_GET_I2C_MSTAT_CMPLT);
 499              		.loc 1 444 0
 500 027e 1D4B     		ldr	r3, .L41+12
 501 0280 1B78     		ldrb	r3, [r3]
 443:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                                                                  I2C_1_GET_I2C_MSTAT_CMPLT);
 502              		.loc 1 443 0
 503 0282 DB07     		lsl	r3, r3, #31
 504 0284 01D5     		bpl	.L38
 505 0286 0923     		mov	r3, #9
 506 0288 00E0     		b	.L30
 507              	.L38:
 508 028a 0A23     		mov	r3, #10
 509              	.L30:
 443:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                                                                  I2C_1_GET_I2C_MSTAT_CMPLT);
 510              		.loc 1 443 0 is_stmt 0 discriminator 4
 511 028c 1B4A     		ldr	r2, .L41+20
 512 028e 1188     		ldrh	r1, [r2]
ARM GAS  C:\Users\Zeus\AppData\Local\Temp\cc6O8YAn.s 			page 18


 513 0290 0B43     		orr	r3, r1
 514 0292 1380     		strh	r3, [r2]
 445:Generated_Source\PSoC4/I2C_1_I2C_INT.c **** 
 446:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                         I2C_1_state = I2C_1_I2C_FSM_MSTR_HALT;
 515              		.loc 1 446 0 is_stmt 1 discriminator 4
 516 0294 6022     		mov	r2, #96
 517 0296 174B     		ldr	r3, .L41+12
 518 0298 1A70     		strb	r2, [r3]
 519 029a 23E0     		b	.L1
 520              	.L29:
 447:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                     }
 448:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                     else
 449:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                     {
 450:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                         /* Complete transaction: exclude the data processing state and generate Sto
 451:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                         * The completion status will be set after Stop generation.
 452:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                         * A special case is read: because NACK and Stop are generated by the comman
 453:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                         * Lost arbitration can occur during NACK generation when
 454:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                         * the other master is still reading from the slave.
 455:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                         */
 456:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                         I2C_1_I2C_MASTER_GENERATE_STOP;
 521              		.loc 1 456 0
 522 029c 314B     		ldr	r3, .L41+124
 523 029e 1B68     		ldr	r3, [r3]
 524 02a0 9B06     		lsl	r3, r3, #26
 525 02a2 01D5     		bpl	.L39
 526 02a4 1822     		mov	r2, #24
 527 02a6 00E0     		b	.L31
 528              	.L39:
 529 02a8 1022     		mov	r2, #16
 530              	.L31:
 531              		.loc 1 456 0 is_stmt 0 discriminator 4
 532 02aa 204B     		ldr	r3, .L41+68
 533 02ac 1A60     		str	r2, [r3]
 534 02ae 19E0     		b	.L1
 535              	.LVL32:
 536              	.L8:
 457:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                     }
 458:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                 }
 459:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****             }
 460:Generated_Source\PSoC4/I2C_1_I2C_INT.c **** 
 461:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****         } /* (I2C_1_I2C_MASTER) */
 462:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****         #endif
 463:Generated_Source\PSoC4/I2C_1_I2C_INT.c **** 
 464:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****     } /* (I2C_1_CHECK_I2C_FSM_MASTER) */
 465:Generated_Source\PSoC4/I2C_1_I2C_INT.c **** 
 466:Generated_Source\PSoC4/I2C_1_I2C_INT.c **** 
 467:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****     /* FSM Slave */
 468:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****     else if(I2C_1_CHECK_I2C_FSM_SLAVE)
 537              		.loc 1 468 0 is_stmt 1
 538 02b0 104B     		ldr	r3, .L41+12
 539              	.LVL33:
 540 02b2 1B78     		ldrb	r3, [r3]
 541 02b4 DB06     		lsl	r3, r3, #27
 542 02b6 15D4     		bmi	.L1
 469:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****     {
 470:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****         #if(I2C_1_I2C_SLAVE)
 471:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****         {
ARM GAS  C:\Users\Zeus\AppData\Local\Temp\cc6O8YAn.s 			page 19


 472:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****             /* INTR_SLAVE_NACK:
 473:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****             * The master completes reading the slave: the appropriate flags have to be set.
 474:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****             * The TX FIFO is cleared after an overflow condition is set.
 475:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****             */
 476:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****             if(I2C_1_CHECK_INTR_SLAVE_MASKED(I2C_1_INTR_SLAVE_I2C_NACK))
 477:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****             {
 478:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                 I2C_1_ClearSlaveInterruptSource(I2C_1_INTR_SLAVE_I2C_NACK);
 479:Generated_Source\PSoC4/I2C_1_I2C_INT.c **** 
 480:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                 /* All entries that remain in TX FIFO are: FIFO Size + 1 (SHIFTER) */
 481:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                 diffCount = (I2C_1_GET_TX_FIFO_ENTRIES + I2C_1_GET_TX_FIFO_SR_VALID);
 482:Generated_Source\PSoC4/I2C_1_I2C_INT.c **** 
 483:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                 if(I2C_1_slOverFlowCount > diffCount) /* Overflow */
 484:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                 {
 485:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                     I2C_1_slStatus |= (uint8) I2C_1_I2C_SSTAT_RD_OVFL;
 486:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                 }
 487:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                 else /* No Overflow */
 488:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                 {
 489:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                     /* Roll-back temporary index */
 490:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                     I2C_1_slRdBufIndexTmp -= (diffCount - I2C_1_slOverFlowCount);
 491:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                 }
 492:Generated_Source\PSoC4/I2C_1_I2C_INT.c **** 
 493:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                 /* Update slave of transferred bytes */
 494:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                 I2C_1_slRdBufIndex = I2C_1_slRdBufIndexTmp;
 495:Generated_Source\PSoC4/I2C_1_I2C_INT.c **** 
 496:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                 /* Clean-up TX FIFO */
 497:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                 I2C_1_SetTxInterruptMode(I2C_1_NO_INTR_SOURCES);
 498:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                 I2C_1_slOverFlowCount = 0u;
 499:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                 I2C_1_CLEAR_TX_FIFO;
 500:Generated_Source\PSoC4/I2C_1_I2C_INT.c **** 
 501:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                 /* Complete master reading */
 502:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                 I2C_1_slStatus &= (uint8) ~I2C_1_I2C_SSTAT_RD_BUSY;
 503:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                 I2C_1_slStatus |= (uint8)  I2C_1_I2C_SSTAT_RD_CMPLT;
 504:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                 I2C_1_state     =  I2C_1_I2C_FSM_IDLE;
 505:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****             }
 506:Generated_Source\PSoC4/I2C_1_I2C_INT.c **** 
 507:Generated_Source\PSoC4/I2C_1_I2C_INT.c **** 
 508:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****             /* INTR_SLAVE_I2C_WRITE_STOP:
 509:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****             * The master completes writing to the slave: the appropriate flags have to be set.
 510:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****             * The RX FIFO contains 1-8 bytes from the previous transaction which needs to be read.
 511:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****             * There is a possibility that RX FIFO contains an address, it needs to leave it there.
 512:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****             */
 513:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****             if(I2C_1_CHECK_INTR_SLAVE_MASKED(I2C_1_INTR_SLAVE_I2C_WRITE_STOP))
 514:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****             {
 515:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                 I2C_1_ClearSlaveInterruptSource(I2C_1_INTR_SLAVE_I2C_WRITE_STOP);
 516:Generated_Source\PSoC4/I2C_1_I2C_INT.c **** 
 517:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                 /* Read bytes from RX FIFO when auto data ACK receive logic is enabled. Otherwise a
 518:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                 * were already read from the RX FIFO except for address byte which has to stay here
 519:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                 * I2C_ADDR_MATCH.
 520:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                 */
 521:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                 if (0u != (I2C_1_I2C_CTRL_REG & I2C_1_I2C_CTRL_S_READY_DATA_ACK))
 522:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                 {
 523:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                     while(0u != I2C_1_GET_RX_FIFO_ENTRIES)
 524:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                     {
 525:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                         #if(I2C_1_CHECK_I2C_ACCEPT_ADDRESS)
 526:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                         {
 527:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                             if((1u == I2C_1_GET_RX_FIFO_ENTRIES) &&
 528:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                                (I2C_1_CHECK_INTR_SLAVE_MASKED(I2C_1_INTR_SLAVE_I2C_ADDR_MATCH)))
ARM GAS  C:\Users\Zeus\AppData\Local\Temp\cc6O8YAn.s 			page 20


 529:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                             {
 530:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                                 break; /* Leave address in RX FIFO */
 531:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                             }
 532:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                         }
 533:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                         #endif
 534:Generated_Source\PSoC4/I2C_1_I2C_INT.c **** 
 535:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                         /* Put data in component buffer */
 536:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                         I2C_1_slWrBufPtr[I2C_1_slWrBufIndex] = (uint8) I2C_1_RX_FIFO_RD_REG;
 537:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                         I2C_1_slWrBufIndex++;
 538:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                     }
 539:Generated_Source\PSoC4/I2C_1_I2C_INT.c **** 
 540:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                     I2C_1_DISABLE_SLAVE_AUTO_DATA;
 541:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                 }
 542:Generated_Source\PSoC4/I2C_1_I2C_INT.c **** 
 543:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                 if(I2C_1_CHECK_INTR_RX(I2C_1_INTR_RX_OVERFLOW))
 544:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                 {
 545:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                     I2C_1_slStatus |= (uint8) I2C_1_I2C_SSTAT_WR_OVFL;
 546:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                 }
 547:Generated_Source\PSoC4/I2C_1_I2C_INT.c **** 
 548:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                 /* Clears RX interrupt sources triggered on data receiving */
 549:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                 I2C_1_SetRxInterruptMode(I2C_1_NO_INTR_SOURCES);
 550:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                 I2C_1_ClearRxInterruptSource(I2C_1_INTR_RX_ALL);
 551:Generated_Source\PSoC4/I2C_1_I2C_INT.c **** 
 552:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                 /* Complete master writing */
 553:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                 I2C_1_slStatus &= (uint8) ~I2C_1_I2C_SSTAT_WR_BUSY;
 554:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                 I2C_1_slStatus |= (uint8)  I2C_1_I2C_SSTAT_WR_CMPLT;
 555:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                 I2C_1_state     =  I2C_1_I2C_FSM_IDLE;
 556:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****             }
 557:Generated_Source\PSoC4/I2C_1_I2C_INT.c **** 
 558:Generated_Source\PSoC4/I2C_1_I2C_INT.c **** 
 559:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****             /* INTR_SLAVE_I2C_ADDR_MATCH or INTR_SLAVE_I2C_GENERAL:
 560:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****             * The address match or general call address event starts the slave operation:
 561:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****             * after leaving the TX or RX direction has to be chosen.
 562:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****             * The wakeup interrupt must be cleared only after an address match is set.
 563:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****             */
 564:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****         #if (I2C_1_I2C_CUSTOM_ADDRESS_HANDLER_CONST)
 565:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****             if (I2C_1_CHECK_INTR_SLAVE_MASKED(I2C_1_INTR_SLAVE_I2C_ADDR_MATCH |
 566:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                                                          I2C_1_INTR_SLAVE_I2C_GENERAL))
 567:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****         #else
 568:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****             if (I2C_1_CHECK_INTR_SLAVE_MASKED(I2C_1_INTR_SLAVE_I2C_ADDR_MATCH))
 569:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****         #endif /* (I2C_1_I2C_CUSTOM_ADDRESS_HANDLER_CONST) */
 570:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****             {
 571:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                 /* Clear externally clocked address match interrupt source when internally clocked 
 572:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                 I2C_1_ClearI2CExtClkInterruptSource(I2C_1_INTR_I2C_EC_WAKE_UP);
 573:Generated_Source\PSoC4/I2C_1_I2C_INT.c **** 
 574:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                 #if (I2C_1_I2C_CUSTOM_ADDRESS_HANDLER)
 575:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                 {
 576:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                     if (NULL != I2C_1_customAddressHandler)
 577:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                     {
 578:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                         /* Call custom address handler */
 579:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                         response = I2C_1_customAddressHandler();
 580:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                     }
 581:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                     else
 582:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                     {
 583:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                         /* Read address from the RX FIFO. If there is no address underflow triggers
 584:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                         * component does not use that source. */
 585:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                         (void) I2C_1_RX_FIFO_RD_REG;
ARM GAS  C:\Users\Zeus\AppData\Local\Temp\cc6O8YAn.s 			page 21


 586:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                         response = I2C_1_I2C_ACK_ADDR;
 587:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                     }
 588:Generated_Source\PSoC4/I2C_1_I2C_INT.c **** 
 589:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                     /* Clears RX sources after address was received in the RX FIFO */
 590:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                     I2C_1_ClearRxInterruptSource(I2C_1_INTR_RX_ALL);
 591:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                 }
 592:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                 #endif
 593:Generated_Source\PSoC4/I2C_1_I2C_INT.c **** 
 594:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****             #if (I2C_1_I2C_CUSTOM_ADDRESS_HANDLER_CONST)
 595:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                 if (response == I2C_1_I2C_NAK_ADDR)
 596:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                 {
 597:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                 #if (!I2C_1_CY_SCBIP_V0)
 598:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                     /* Disable write stop interrupt source as it triggers after address was NACKed.
 599:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                     I2C_1_DISABLE_INTR_SLAVE(I2C_1_INTR_SLAVE_I2C_WRITE_STOP);
 600:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                 #endif /* (!I2C_1_CY_SCBIP_V0) */
 601:Generated_Source\PSoC4/I2C_1_I2C_INT.c **** 
 602:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                     /* Clear address match and stop history */
 603:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                     I2C_1_ClearSlaveInterruptSource(I2C_1_INTR_SLAVE_ALL);
 604:Generated_Source\PSoC4/I2C_1_I2C_INT.c **** 
 605:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                     /* ACK the address byte */
 606:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                     I2C_1_I2C_SLAVE_GENERATE_NACK;
 607:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                 }
 608:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                 else
 609:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****             #endif /* (I2C_1_I2C_CUSTOM_ADDRESS_HANDLER_CONST) */
 610:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                 {
 611:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                     if(I2C_1_CHECK_I2C_STATUS(I2C_1_I2C_STATUS_S_READ))
 612:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                     /* TX direction: master reads from slave */
 613:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                     {
 614:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                         I2C_1_SetTxInterruptMode(I2C_1_INTR_TX_EMPTY);
 615:Generated_Source\PSoC4/I2C_1_I2C_INT.c **** 
 616:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                         /* Set temporary index to address buffer clear from API */
 617:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                         I2C_1_slRdBufIndexTmp = I2C_1_slRdBufIndex;
 618:Generated_Source\PSoC4/I2C_1_I2C_INT.c **** 
 619:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                         /* Start master reading */
 620:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                         I2C_1_slStatus |= (uint8) I2C_1_I2C_SSTAT_RD_BUSY;
 621:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                         I2C_1_state     = I2C_1_I2C_FSM_SL_RD;
 622:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                     }
 623:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                     else
 624:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                     /* RX direction: master writes into slave */
 625:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                     {
 626:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                         /* Calculate available buffer size */
 627:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                         diffCount = (I2C_1_slWrBufSize - I2C_1_slWrBufIndex);
 628:Generated_Source\PSoC4/I2C_1_I2C_INT.c **** 
 629:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                     #if (I2C_1_CY_SCBIP_V0)
 630:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                         if(diffCount < I2C_1_I2C_FIFO_SIZE)
 631:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                         /* Receive data: byte-by-byte */
 632:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                         {
 633:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                             I2C_1_SetRxInterruptMode(I2C_1_INTR_RX_NOT_EMPTY);
 634:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                         }
 635:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                         else
 636:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                         /* Receive data: into RX FIFO */
 637:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                         {
 638:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                             if(diffCount == I2C_1_I2C_FIFO_SIZE)
 639:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                             {
 640:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                                 /* NACK when RX FIFO become FULL */
 641:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                                 I2C_1_ENABLE_SLAVE_AUTO_DATA;
 642:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                             }
ARM GAS  C:\Users\Zeus\AppData\Local\Temp\cc6O8YAn.s 			page 22


 643:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                             else
 644:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                             {
 645:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                                 /* Stretch clock when RX FIFO becomes FULL */
 646:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                                 I2C_1_ENABLE_SLAVE_AUTO_DATA_ACK;
 647:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                                 I2C_1_SetRxInterruptMode(I2C_1_INTR_RX_FULL);
 648:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                             }
 649:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                         }
 650:Generated_Source\PSoC4/I2C_1_I2C_INT.c **** 
 651:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                     #else
 652:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                         #if(I2C_1_CHECK_I2C_ACCEPT_ADDRESS)
 653:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                         {
 654:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                             /* Enable RX.NOT_EMPTY interrupt source to receive byte by byte.
 655:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                             * The byte by byte receive is always chosen for the case when an addres
 656:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                             * in RX FIFO. Ticket ID#175559.
 657:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                             */
 658:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                             I2C_1_SetRxInterruptMode(I2C_1_INTR_RX_NOT_EMPTY);
 659:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                         }
 660:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                         #else
 661:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                         {
 662:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                             if(diffCount < I2C_1_I2C_FIFO_SIZE)
 663:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                             /* Receive data: byte-by-byte */
 664:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                             {
 665:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                                 I2C_1_SetRxInterruptMode(I2C_1_INTR_RX_NOT_EMPTY);
 666:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                             }
 667:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                             else
 668:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                             /* Receive data: into RX FIFO */
 669:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                             {
 670:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                                 if(diffCount == I2C_1_I2C_FIFO_SIZE)
 671:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                                 {
 672:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                                     /* NACK when RX FIFO become FULL */
 673:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                                     I2C_1_ENABLE_SLAVE_AUTO_DATA;
 674:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                                 }
 675:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                                 else
 676:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                                 {
 677:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                                     /* Stretch clock when RX FIFO becomes FULL */
 678:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                                     I2C_1_ENABLE_SLAVE_AUTO_DATA_ACK;
 679:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                                     I2C_1_SetRxInterruptMode(I2C_1_INTR_RX_FULL);
 680:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                                 }
 681:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                             }
 682:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                         }
 683:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                         #endif
 684:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                     #endif /* (I2C_1_CY_SCBIP_V0) */
 685:Generated_Source\PSoC4/I2C_1_I2C_INT.c **** 
 686:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                         /* Start master reading */
 687:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                         I2C_1_slStatus |= (uint8) I2C_1_I2C_SSTAT_WR_BUSY;
 688:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                         I2C_1_state     = I2C_1_I2C_FSM_SL_WR;
 689:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                     }
 690:Generated_Source\PSoC4/I2C_1_I2C_INT.c **** 
 691:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                     /* Clear address match and stop history */
 692:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                     I2C_1_ClearSlaveInterruptSource(I2C_1_INTR_SLAVE_ALL);
 693:Generated_Source\PSoC4/I2C_1_I2C_INT.c **** 
 694:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                 #if (!I2C_1_CY_SCBIP_V0)
 695:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                     /* Enable write stop interrupt source as it triggers after address was NACKed. 
 696:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                     I2C_1_ENABLE_INTR_SLAVE(I2C_1_INTR_SLAVE_I2C_WRITE_STOP);
 697:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                 #endif /* (!I2C_1_CY_SCBIP_V0) */
 698:Generated_Source\PSoC4/I2C_1_I2C_INT.c **** 
 699:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                     /* ACK the address byte */
ARM GAS  C:\Users\Zeus\AppData\Local\Temp\cc6O8YAn.s 			page 23


 700:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                     I2C_1_I2C_SLAVE_GENERATE_ACK;
 701:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                 }
 702:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****             }
 703:Generated_Source\PSoC4/I2C_1_I2C_INT.c **** 
 704:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****             /* I2C_1_INTR_RX_FULL:
 705:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****             * Get data from the RX FIFO and decide whether to ACK or NACK the following bytes
 706:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****             */
 707:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****             if(I2C_1_CHECK_INTR_RX_MASKED(I2C_1_INTR_RX_FULL))
 708:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****             {
 709:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                 /* Calculate available buffer size to take into account that RX FIFO is FULL */
 710:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                 diffCount =  I2C_1_slWrBufSize -
 711:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                             (I2C_1_slWrBufIndex + I2C_1_I2C_FIFO_SIZE);
 712:Generated_Source\PSoC4/I2C_1_I2C_INT.c **** 
 713:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                 if(diffCount > I2C_1_I2C_FIFO_SIZE) /* Proceed transaction */
 714:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                 {
 715:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                     diffCount   = I2C_1_I2C_FIFO_SIZE;
 716:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                     endTransfer = 0u;  /* Continue active transfer */
 717:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                 }
 718:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                 else /* End when FIFO becomes FULL again */
 719:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                 {
 720:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                     endTransfer = I2C_1_I2C_CMPLT_ANY_TRANSFER;
 721:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                 }
 722:Generated_Source\PSoC4/I2C_1_I2C_INT.c **** 
 723:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                 for(; (0u != diffCount); diffCount--)
 724:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                 {
 725:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                     /* Put data in component buffer */
 726:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                     I2C_1_slWrBufPtr[I2C_1_slWrBufIndex] = (uint8) I2C_1_RX_FIFO_RD_REG;
 727:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                     I2C_1_slWrBufIndex++;
 728:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                 }
 729:Generated_Source\PSoC4/I2C_1_I2C_INT.c **** 
 730:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                 if(0u != endTransfer) /* End transfer sending NACK */
 731:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                 {
 732:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                     I2C_1_ENABLE_SLAVE_AUTO_DATA_NACK;
 733:Generated_Source\PSoC4/I2C_1_I2C_INT.c **** 
 734:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                     /* INTR_RX_FULL triggers earlier than INTR_SLAVE_I2C_STOP:
 735:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                     * disable all RX interrupt sources.
 736:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                     */
 737:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                     I2C_1_SetRxInterruptMode(I2C_1_NO_INTR_SOURCES);
 738:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                 }
 739:Generated_Source\PSoC4/I2C_1_I2C_INT.c **** 
 740:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                 I2C_1_ClearRxInterruptSource(I2C_1_INTR_RX_FULL);
 741:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****             }
 742:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****             /* I2C_1_INTR_RX_NOT_EMPTY:
 743:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****             * The buffer size is less than 8: it requires processing in byte-by-byte mode.
 744:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****             */
 745:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****             else if(I2C_1_CHECK_INTR_RX_MASKED(I2C_1_INTR_RX_NOT_EMPTY))
 746:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****             {
 747:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                 diffCount = I2C_1_RX_FIFO_RD_REG;
 748:Generated_Source\PSoC4/I2C_1_I2C_INT.c **** 
 749:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                 if(I2C_1_slWrBufIndex < I2C_1_slWrBufSize)
 750:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                 {
 751:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                     I2C_1_I2C_SLAVE_GENERATE_ACK;
 752:Generated_Source\PSoC4/I2C_1_I2C_INT.c **** 
 753:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                     /* Put data into component buffer */
 754:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                     I2C_1_slWrBufPtr[I2C_1_slWrBufIndex] = (uint8) diffCount;
 755:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                     I2C_1_slWrBufIndex++;
 756:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                 }
ARM GAS  C:\Users\Zeus\AppData\Local\Temp\cc6O8YAn.s 			page 24


 757:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                 else /* Overflow: there is no space in write buffer */
 758:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                 {
 759:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                     I2C_1_I2C_SLAVE_GENERATE_NACK;
 760:Generated_Source\PSoC4/I2C_1_I2C_INT.c **** 
 761:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                     I2C_1_slStatus |= (uint8) I2C_1_I2C_SSTAT_WR_OVFL;
 762:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                 }
 763:Generated_Source\PSoC4/I2C_1_I2C_INT.c **** 
 764:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                 I2C_1_ClearRxInterruptSource(I2C_1_INTR_RX_NOT_EMPTY);
 765:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****             }
 766:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****             else
 767:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****             {
 768:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                 /* Does nothing */
 769:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****             }
 770:Generated_Source\PSoC4/I2C_1_I2C_INT.c **** 
 771:Generated_Source\PSoC4/I2C_1_I2C_INT.c **** 
 772:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****             /* I2C_1_INTR_TX_EMPTY:
 773:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****             * The master reads the slave: provide data to read or 0xFF in the case of the end of th
 774:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****             * The overflow condition must be captured, but not set until the end of transaction.
 775:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****             * There is a possibility of a false overflow due to TX FIFO utilization.
 776:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****             */
 777:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****             if(I2C_1_CHECK_INTR_TX_MASKED(I2C_1_INTR_TX_EMPTY))
 778:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****             {
 779:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                 while(I2C_1_I2C_FIFO_SIZE != I2C_1_GET_TX_FIFO_ENTRIES)
 780:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                 {
 781:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                     /* Temporary slRdBufIndexTmp is used because the master can NACK the byte and
 782:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                     * index roll-back is required in this case. The slRdBufIndex is updated at the 
 783:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                     * of the read transfer.
 784:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                     */
 785:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                     if(I2C_1_slRdBufIndexTmp < I2C_1_slRdBufSize)
 786:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                     /* Data from buffer */
 787:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                     {
 788:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                         I2C_1_TX_FIFO_WR_REG = (uint32) I2C_1_slRdBufPtr[I2C_1_slRdBufIndexTmp];
 789:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                         I2C_1_slRdBufIndexTmp++;
 790:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                     }
 791:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                     else
 792:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                     /* Probably Overflow */
 793:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                     {
 794:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                         I2C_1_TX_FIFO_WR_REG = I2C_1_I2C_SLAVE_OVFL_RETURN;
 795:Generated_Source\PSoC4/I2C_1_I2C_INT.c **** 
 796:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                         if(I2C_1_slOverFlowCount <= I2C_1_I2C_TX_OVERFLOW_COUNT)
 797:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                         {
 798:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                             /* Get counter in range of overflow. */
 799:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                             I2C_1_slOverFlowCount++;
 800:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                         }
 801:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                     }
 802:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                 }
 803:Generated_Source\PSoC4/I2C_1_I2C_INT.c **** 
 804:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                 I2C_1_ClearTxInterruptSource(I2C_1_INTR_TX_EMPTY);
 805:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****             }
 806:Generated_Source\PSoC4/I2C_1_I2C_INT.c **** 
 807:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****         }  /* (I2C_1_I2C_SLAVE) */
 808:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****         #endif
 809:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****     }
 810:Generated_Source\PSoC4/I2C_1_I2C_INT.c **** 
 811:Generated_Source\PSoC4/I2C_1_I2C_INT.c **** 
 812:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****     /* FSM EXIT:
 813:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****     * Slave:  INTR_SLAVE_I2C_BUS_ERROR, INTR_SLAVE_I2C_ARB_LOST
ARM GAS  C:\Users\Zeus\AppData\Local\Temp\cc6O8YAn.s 			page 25


 814:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****     * Master: INTR_MASTER_I2C_BUS_ERROR, INTR_MASTER_I2C_ARB_LOST.
 815:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****     */
 816:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****     else
 817:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****     {
 818:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****         I2C_1_CTRL_REG &= (uint32) ~I2C_1_CTRL_ENABLED; /* Disable scb IP */
 543              		.loc 1 818 0
 544 02b8 2B4A     		ldr	r2, .L41+128
 545 02ba 1368     		ldr	r3, [r2]
 546 02bc 5B00     		lsl	r3, r3, #1
 547 02be 5B08     		lsr	r3, r3, #1
 548 02c0 1360     		str	r3, [r2]
 819:Generated_Source\PSoC4/I2C_1_I2C_INT.c **** 
 820:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****         I2C_1_state = I2C_1_I2C_FSM_IDLE;
 549              		.loc 1 820 0
 550 02c2 1021     		mov	r1, #16
 551 02c4 0B4B     		ldr	r3, .L41+12
 552 02c6 1970     		strb	r1, [r3]
 821:Generated_Source\PSoC4/I2C_1_I2C_INT.c **** 
 822:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****         I2C_1_DISABLE_SLAVE_AUTO_DATA;
 553              		.loc 1 822 0
 554 02c8 144B     		ldr	r3, .L41+52
 555 02ca 1868     		ldr	r0, [r3]
 556 02cc 2749     		ldr	r1, .L41+132
 557 02ce 0140     		and	r1, r0
 558 02d0 1960     		str	r1, [r3]
 823:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****         I2C_1_DISABLE_MASTER_AUTO_DATA;
 559              		.loc 1 823 0
 560 02d2 1868     		ldr	r0, [r3]
 561 02d4 2649     		ldr	r1, .L41+136
 562 02d6 0140     		and	r1, r0
 563 02d8 1960     		str	r1, [r3]
 824:Generated_Source\PSoC4/I2C_1_I2C_INT.c **** 
 825:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****     #if(I2C_1_CY_SCBIP_V0)
 826:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****         I2C_1_SetRxInterruptMode(I2C_1_NO_INTR_SOURCES);
 827:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****         I2C_1_SetTxInterruptMode(I2C_1_NO_INTR_SOURCES);
 828:Generated_Source\PSoC4/I2C_1_I2C_INT.c **** 
 829:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****         /* Clear interrupt sources as they are not automatically cleared after SCB is disabled */
 830:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****         I2C_1_ClearTxInterruptSource(I2C_1_INTR_RX_ALL);
 831:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****         I2C_1_ClearRxInterruptSource(I2C_1_INTR_TX_ALL);
 832:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****         I2C_1_ClearSlaveInterruptSource(I2C_1_INTR_SLAVE_ALL);
 833:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****         I2C_1_ClearMasterInterruptSource(I2C_1_INTR_MASTER_ALL);
 834:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****     #endif /* (I2C_1_CY_SCBIP_V0) */
 835:Generated_Source\PSoC4/I2C_1_I2C_INT.c **** 
 836:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****         I2C_1_CTRL_REG |= (uint32) I2C_1_CTRL_ENABLED;  /* Enable scb IP */
 564              		.loc 1 836 0
 565 02da 1368     		ldr	r3, [r2]
 566 02dc 8021     		mov	r1, #128
 567 02de 0906     		lsl	r1, r1, #24
 568 02e0 0B43     		orr	r3, r1
 569 02e2 1360     		str	r3, [r2]
 570              	.L1:
 837:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****     }
 838:Generated_Source\PSoC4/I2C_1_I2C_INT.c **** 
 839:Generated_Source\PSoC4/I2C_1_I2C_INT.c **** #ifdef I2C_1_I2C_ISR_EXIT_CALLBACK
 840:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****     I2C_1_I2C_ISR_ExitCallback();
 841:Generated_Source\PSoC4/I2C_1_I2C_INT.c **** #endif /* I2C_1_I2C_ISR_EXIT_CALLBACK */
 842:Generated_Source\PSoC4/I2C_1_I2C_INT.c **** 
ARM GAS  C:\Users\Zeus\AppData\Local\Temp\cc6O8YAn.s 			page 26


 843:Generated_Source\PSoC4/I2C_1_I2C_INT.c **** }
 571              		.loc 1 843 0
 572              		@ sp needed
 573 02e4 10BD     		pop	{r4, pc}
 574              	.L42:
 575 02e6 C046     		.align	2
 576              	.L41:
 577 02e8 00000000 		.word	I2C_1_customIntrHandler
 578 02ec 8C0E0740 		.word	1074204300
 579 02f0 880E0740 		.word	1074204296
 580 02f4 00000000 		.word	I2C_1_state
 581 02f8 0C0F0740 		.word	1074204428
 582 02fc 00000000 		.word	I2C_1_mstrStatus
 583 0300 000F0740 		.word	1074204416
 584 0304 00000000 		.word	I2C_1_mstrWrBufSize
 585 0308 880F0740 		.word	1074204552
 586 030c CC0F0740 		.word	1074204620
 587 0310 00000000 		.word	I2C_1_mstrRdBufSize
 588 0314 08030740 		.word	1074201352
 589 0318 00000000 		.word	I2C_1_mstrRdBufIndex
 590 031c 60000740 		.word	1074200672
 591 0320 FFFEFFFF 		.word	-257
 592 0324 00000000 		.word	I2C_1_mstrRdBufPtr
 593 0328 40030740 		.word	1074201408
 594 032c 68000740 		.word	1074200680
 595 0330 ED0F0000 		.word	4077
 596 0334 C00F0740 		.word	1074204608
 597 0338 08020740 		.word	1074201096
 598 033c 00000000 		.word	I2C_1_mstrWrBufIndexTmp
 599 0340 00000000 		.word	I2C_1_mstrWrBufIndex
 600 0344 04020740 		.word	1074201092
 601 0348 FFFFFEFF 		.word	-65537
 602 034c 8C0F0740 		.word	1074204556
 603 0350 800F0740 		.word	1074204544
 604 0354 00000000 		.word	I2C_1_mstrWrBufPtr
 605 0358 40020740 		.word	1074201152
 606 035c C80F0740 		.word	1074204616
 607 0360 00000000 		.word	I2C_1_mstrControl
 608 0364 64000740 		.word	1074200676
 609 0368 00000740 		.word	1074200576
 610 036c FF5FFFFF 		.word	-40961
 611 0370 FFFCFFFF 		.word	-769
 612              		.cfi_endproc
 613              	.LFE1:
 614              		.size	I2C_1_I2C_ISR, .-I2C_1_I2C_ISR
 615              		.text
 616              	.Letext0:
 617              		.file 2 "Generated_Source\\PSoC4/cytypes.h"
 618              		.file 3 "Generated_Source\\PSoC4\\I2C_1_PVT.h"
 619              		.file 4 "Generated_Source\\PSoC4\\I2C_1_I2C_PVT.h"
 620              		.section	.debug_info,"",%progbits
 621              	.Ldebug_info0:
 622 0000 89010000 		.4byte	0x189
 623 0004 0400     		.2byte	0x4
 624 0006 00000000 		.4byte	.Ldebug_abbrev0
 625 000a 04       		.byte	0x4
 626 000b 01       		.uleb128 0x1
ARM GAS  C:\Users\Zeus\AppData\Local\Temp\cc6O8YAn.s 			page 27


 627 000c B5000000 		.4byte	.LASF31
 628 0010 01       		.byte	0x1
 629 0011 80000000 		.4byte	.LASF32
 630 0015 69010000 		.4byte	.LASF33
 631 0019 00000000 		.4byte	.Ldebug_ranges0+0
 632 001d 00000000 		.4byte	0
 633 0021 00000000 		.4byte	.Ldebug_line0
 634 0025 02       		.uleb128 0x2
 635 0026 01       		.byte	0x1
 636 0027 06       		.byte	0x6
 637 0028 B5020000 		.4byte	.LASF0
 638 002c 02       		.uleb128 0x2
 639 002d 01       		.byte	0x1
 640 002e 08       		.byte	0x8
 641 002f A7000000 		.4byte	.LASF1
 642 0033 02       		.uleb128 0x2
 643 0034 02       		.byte	0x2
 644 0035 05       		.byte	0x5
 645 0036 75020000 		.4byte	.LASF2
 646 003a 02       		.uleb128 0x2
 647 003b 02       		.byte	0x2
 648 003c 07       		.byte	0x7
 649 003d 40000000 		.4byte	.LASF3
 650 0041 02       		.uleb128 0x2
 651 0042 04       		.byte	0x4
 652 0043 05       		.byte	0x5
 653 0044 AC020000 		.4byte	.LASF4
 654 0048 02       		.uleb128 0x2
 655 0049 04       		.byte	0x4
 656 004a 07       		.byte	0x7
 657 004b 47010000 		.4byte	.LASF5
 658 004f 02       		.uleb128 0x2
 659 0050 08       		.byte	0x8
 660 0051 05       		.byte	0x5
 661 0052 4F020000 		.4byte	.LASF6
 662 0056 02       		.uleb128 0x2
 663 0057 08       		.byte	0x8
 664 0058 07       		.byte	0x7
 665 0059 11020000 		.4byte	.LASF7
 666 005d 03       		.uleb128 0x3
 667 005e 04       		.byte	0x4
 668 005f 05       		.byte	0x5
 669 0060 696E7400 		.ascii	"int\000"
 670 0064 02       		.uleb128 0x2
 671 0065 04       		.byte	0x4
 672 0066 07       		.byte	0x7
 673 0067 04020000 		.4byte	.LASF8
 674 006b 04       		.uleb128 0x4
 675 006c 63010000 		.4byte	.LASF9
 676 0070 02       		.byte	0x2
 677 0071 B901     		.2byte	0x1b9
 678 0073 2C000000 		.4byte	0x2c
 679 0077 04       		.uleb128 0x4
 680 0078 EA010000 		.4byte	.LASF10
 681 007c 02       		.byte	0x2
 682 007d BA01     		.2byte	0x1ba
 683 007f 3A000000 		.4byte	0x3a
ARM GAS  C:\Users\Zeus\AppData\Local\Temp\cc6O8YAn.s 			page 28


 684 0083 04       		.uleb128 0x4
 685 0084 F1010000 		.4byte	.LASF11
 686 0088 02       		.byte	0x2
 687 0089 BB01     		.2byte	0x1bb
 688 008b 48000000 		.4byte	0x48
 689 008f 02       		.uleb128 0x2
 690 0090 04       		.byte	0x4
 691 0091 04       		.byte	0x4
 692 0092 7A000000 		.4byte	.LASF12
 693 0096 02       		.uleb128 0x2
 694 0097 08       		.byte	0x8
 695 0098 04       		.byte	0x4
 696 0099 5F000000 		.4byte	.LASF13
 697 009d 02       		.uleb128 0x2
 698 009e 01       		.byte	0x1
 699 009f 08       		.byte	0x8
 700 00a0 5D020000 		.4byte	.LASF14
 701 00a4 05       		.uleb128 0x5
 702 00a5 6B000000 		.4byte	0x6b
 703 00a9 05       		.uleb128 0x5
 704 00aa 77000000 		.4byte	0x77
 705 00ae 04       		.uleb128 0x4
 706 00af 00000000 		.4byte	.LASF15
 707 00b3 02       		.byte	0x2
 708 00b4 6502     		.2byte	0x265
 709 00b6 BA000000 		.4byte	0xba
 710 00ba 05       		.uleb128 0x5
 711 00bb 83000000 		.4byte	0x83
 712 00bf 04       		.uleb128 0x4
 713 00c0 39020000 		.4byte	.LASF16
 714 00c4 02       		.byte	0x2
 715 00c5 7502     		.2byte	0x275
 716 00c7 CB000000 		.4byte	0xcb
 717 00cb 06       		.uleb128 0x6
 718 00cc 04       		.byte	0x4
 719 00cd D1000000 		.4byte	0xd1
 720 00d1 07       		.uleb128 0x7
 721 00d2 02       		.uleb128 0x2
 722 00d3 04       		.byte	0x4
 723 00d4 07       		.byte	0x7
 724 00d5 46020000 		.4byte	.LASF17
 725 00d9 08       		.uleb128 0x8
 726 00da D5020000 		.4byte	.LASF34
 727 00de 01       		.byte	0x1
 728 00df 1F       		.byte	0x1f
 729 00e0 00000000 		.4byte	.LFB1
 730 00e4 74030000 		.4byte	.LFE1-.LFB1
 731 00e8 01       		.uleb128 0x1
 732 00e9 9C       		.byte	0x9c
 733 00ea 0D010000 		.4byte	0x10d
 734 00ee 09       		.uleb128 0x9
 735 00ef 59010000 		.4byte	.LASF18
 736 00f3 01       		.byte	0x1
 737 00f4 21       		.byte	0x21
 738 00f5 83000000 		.4byte	0x83
 739 00f9 00000000 		.4byte	.LLST0
 740 00fd 09       		.uleb128 0x9
ARM GAS  C:\Users\Zeus\AppData\Local\Temp\cc6O8YAn.s 			page 29


 741 00fe 53000000 		.4byte	.LASF19
 742 0102 01       		.byte	0x1
 743 0103 22       		.byte	0x22
 744 0104 83000000 		.4byte	0x83
 745 0108 35000000 		.4byte	.LLST1
 746 010c 00       		.byte	0
 747 010d 0A       		.uleb128 0xa
 748 010e 7F020000 		.4byte	.LASF20
 749 0112 03       		.byte	0x3
 750 0113 3B       		.byte	0x3b
 751 0114 BF000000 		.4byte	0xbf
 752 0118 0A       		.uleb128 0xa
 753 0119 F8010000 		.4byte	.LASF21
 754 011d 04       		.byte	0x4
 755 011e 1E       		.byte	0x1e
 756 011f A4000000 		.4byte	0xa4
 757 0123 0A       		.uleb128 0xa
 758 0124 28020000 		.4byte	.LASF22
 759 0128 04       		.byte	0x4
 760 0129 31       		.byte	0x31
 761 012a A9000000 		.4byte	0xa9
 762 012e 0A       		.uleb128 0xa
 763 012f 1B000000 		.4byte	.LASF23
 764 0133 04       		.byte	0x4
 765 0134 32       		.byte	0x32
 766 0135 A4000000 		.4byte	0xa4
 767 0139 0A       		.uleb128 0xa
 768 013a 62020000 		.4byte	.LASF24
 769 013e 04       		.byte	0x4
 770 013f 35       		.byte	0x35
 771 0140 44010000 		.4byte	0x144
 772 0144 06       		.uleb128 0x6
 773 0145 04       		.byte	0x4
 774 0146 A4000000 		.4byte	0xa4
 775 014a 0A       		.uleb128 0xa
 776 014b C1020000 		.4byte	.LASF25
 777 014f 04       		.byte	0x4
 778 0150 36       		.byte	0x36
 779 0151 BA000000 		.4byte	0xba
 780 0155 0A       		.uleb128 0xa
 781 0156 06000000 		.4byte	.LASF26
 782 015a 04       		.byte	0x4
 783 015b 37       		.byte	0x37
 784 015c BA000000 		.4byte	0xba
 785 0160 0A       		.uleb128 0xa
 786 0161 2D000000 		.4byte	.LASF27
 787 0165 04       		.byte	0x4
 788 0166 3A       		.byte	0x3a
 789 0167 44010000 		.4byte	0x144
 790 016b 0A       		.uleb128 0xa
 791 016c 66000000 		.4byte	.LASF28
 792 0170 04       		.byte	0x4
 793 0171 3B       		.byte	0x3b
 794 0172 BA000000 		.4byte	0xba
 795 0176 0A       		.uleb128 0xa
 796 0177 97020000 		.4byte	.LASF29
 797 017b 04       		.byte	0x4
ARM GAS  C:\Users\Zeus\AppData\Local\Temp\cc6O8YAn.s 			page 30


 798 017c 3C       		.byte	0x3c
 799 017d BA000000 		.4byte	0xba
 800 0181 0A       		.uleb128 0xa
 801 0182 D2010000 		.4byte	.LASF30
 802 0186 04       		.byte	0x4
 803 0187 3D       		.byte	0x3d
 804 0188 BA000000 		.4byte	0xba
 805 018c 00       		.byte	0
 806              		.section	.debug_abbrev,"",%progbits
 807              	.Ldebug_abbrev0:
 808 0000 01       		.uleb128 0x1
 809 0001 11       		.uleb128 0x11
 810 0002 01       		.byte	0x1
 811 0003 25       		.uleb128 0x25
 812 0004 0E       		.uleb128 0xe
 813 0005 13       		.uleb128 0x13
 814 0006 0B       		.uleb128 0xb
 815 0007 03       		.uleb128 0x3
 816 0008 0E       		.uleb128 0xe
 817 0009 1B       		.uleb128 0x1b
 818 000a 0E       		.uleb128 0xe
 819 000b 55       		.uleb128 0x55
 820 000c 17       		.uleb128 0x17
 821 000d 11       		.uleb128 0x11
 822 000e 01       		.uleb128 0x1
 823 000f 10       		.uleb128 0x10
 824 0010 17       		.uleb128 0x17
 825 0011 00       		.byte	0
 826 0012 00       		.byte	0
 827 0013 02       		.uleb128 0x2
 828 0014 24       		.uleb128 0x24
 829 0015 00       		.byte	0
 830 0016 0B       		.uleb128 0xb
 831 0017 0B       		.uleb128 0xb
 832 0018 3E       		.uleb128 0x3e
 833 0019 0B       		.uleb128 0xb
 834 001a 03       		.uleb128 0x3
 835 001b 0E       		.uleb128 0xe
 836 001c 00       		.byte	0
 837 001d 00       		.byte	0
 838 001e 03       		.uleb128 0x3
 839 001f 24       		.uleb128 0x24
 840 0020 00       		.byte	0
 841 0021 0B       		.uleb128 0xb
 842 0022 0B       		.uleb128 0xb
 843 0023 3E       		.uleb128 0x3e
 844 0024 0B       		.uleb128 0xb
 845 0025 03       		.uleb128 0x3
 846 0026 08       		.uleb128 0x8
 847 0027 00       		.byte	0
 848 0028 00       		.byte	0
 849 0029 04       		.uleb128 0x4
 850 002a 16       		.uleb128 0x16
 851 002b 00       		.byte	0
 852 002c 03       		.uleb128 0x3
 853 002d 0E       		.uleb128 0xe
 854 002e 3A       		.uleb128 0x3a
ARM GAS  C:\Users\Zeus\AppData\Local\Temp\cc6O8YAn.s 			page 31


 855 002f 0B       		.uleb128 0xb
 856 0030 3B       		.uleb128 0x3b
 857 0031 05       		.uleb128 0x5
 858 0032 49       		.uleb128 0x49
 859 0033 13       		.uleb128 0x13
 860 0034 00       		.byte	0
 861 0035 00       		.byte	0
 862 0036 05       		.uleb128 0x5
 863 0037 35       		.uleb128 0x35
 864 0038 00       		.byte	0
 865 0039 49       		.uleb128 0x49
 866 003a 13       		.uleb128 0x13
 867 003b 00       		.byte	0
 868 003c 00       		.byte	0
 869 003d 06       		.uleb128 0x6
 870 003e 0F       		.uleb128 0xf
 871 003f 00       		.byte	0
 872 0040 0B       		.uleb128 0xb
 873 0041 0B       		.uleb128 0xb
 874 0042 49       		.uleb128 0x49
 875 0043 13       		.uleb128 0x13
 876 0044 00       		.byte	0
 877 0045 00       		.byte	0
 878 0046 07       		.uleb128 0x7
 879 0047 15       		.uleb128 0x15
 880 0048 00       		.byte	0
 881 0049 27       		.uleb128 0x27
 882 004a 19       		.uleb128 0x19
 883 004b 00       		.byte	0
 884 004c 00       		.byte	0
 885 004d 08       		.uleb128 0x8
 886 004e 2E       		.uleb128 0x2e
 887 004f 01       		.byte	0x1
 888 0050 3F       		.uleb128 0x3f
 889 0051 19       		.uleb128 0x19
 890 0052 03       		.uleb128 0x3
 891 0053 0E       		.uleb128 0xe
 892 0054 3A       		.uleb128 0x3a
 893 0055 0B       		.uleb128 0xb
 894 0056 3B       		.uleb128 0x3b
 895 0057 0B       		.uleb128 0xb
 896 0058 27       		.uleb128 0x27
 897 0059 19       		.uleb128 0x19
 898 005a 11       		.uleb128 0x11
 899 005b 01       		.uleb128 0x1
 900 005c 12       		.uleb128 0x12
 901 005d 06       		.uleb128 0x6
 902 005e 40       		.uleb128 0x40
 903 005f 18       		.uleb128 0x18
 904 0060 9642     		.uleb128 0x2116
 905 0062 19       		.uleb128 0x19
 906 0063 01       		.uleb128 0x1
 907 0064 13       		.uleb128 0x13
 908 0065 00       		.byte	0
 909 0066 00       		.byte	0
 910 0067 09       		.uleb128 0x9
 911 0068 34       		.uleb128 0x34
ARM GAS  C:\Users\Zeus\AppData\Local\Temp\cc6O8YAn.s 			page 32


 912 0069 00       		.byte	0
 913 006a 03       		.uleb128 0x3
 914 006b 0E       		.uleb128 0xe
 915 006c 3A       		.uleb128 0x3a
 916 006d 0B       		.uleb128 0xb
 917 006e 3B       		.uleb128 0x3b
 918 006f 0B       		.uleb128 0xb
 919 0070 49       		.uleb128 0x49
 920 0071 13       		.uleb128 0x13
 921 0072 02       		.uleb128 0x2
 922 0073 17       		.uleb128 0x17
 923 0074 00       		.byte	0
 924 0075 00       		.byte	0
 925 0076 0A       		.uleb128 0xa
 926 0077 34       		.uleb128 0x34
 927 0078 00       		.byte	0
 928 0079 03       		.uleb128 0x3
 929 007a 0E       		.uleb128 0xe
 930 007b 3A       		.uleb128 0x3a
 931 007c 0B       		.uleb128 0xb
 932 007d 3B       		.uleb128 0x3b
 933 007e 0B       		.uleb128 0xb
 934 007f 49       		.uleb128 0x49
 935 0080 13       		.uleb128 0x13
 936 0081 3F       		.uleb128 0x3f
 937 0082 19       		.uleb128 0x19
 938 0083 3C       		.uleb128 0x3c
 939 0084 19       		.uleb128 0x19
 940 0085 00       		.byte	0
 941 0086 00       		.byte	0
 942 0087 00       		.byte	0
 943              		.section	.debug_loc,"",%progbits
 944              	.Ldebug_loc0:
 945              	.LLST0:
 946 0000 24010000 		.4byte	.LVL16
 947 0004 36010000 		.4byte	.LVL18
 948 0008 0100     		.2byte	0x1
 949 000a 54       		.byte	0x54
 950 000b 36010000 		.4byte	.LVL18
 951 000f 3C010000 		.4byte	.LVL19
 952 0013 0200     		.2byte	0x2
 953 0015 38       		.byte	0x38
 954 0016 9F       		.byte	0x9f
 955 0017 3C010000 		.4byte	.LVL19
 956 001b 3E010000 		.4byte	.LVL20
 957 001f 0100     		.2byte	0x1
 958 0021 54       		.byte	0x54
 959 0022 40010000 		.4byte	.LVL21
 960 0026 60010000 		.4byte	.LVL23
 961 002a 0100     		.2byte	0x1
 962 002c 54       		.byte	0x54
 963 002d 00000000 		.4byte	0
 964 0031 00000000 		.4byte	0
 965              	.LLST1:
 966 0035 02000000 		.4byte	.LVL0
 967 0039 36000000 		.4byte	.LVL2
 968 003d 0200     		.2byte	0x2
ARM GAS  C:\Users\Zeus\AppData\Local\Temp\cc6O8YAn.s 			page 33


 969 003f 30       		.byte	0x30
 970 0040 9F       		.byte	0x9f
 971 0041 36000000 		.4byte	.LVL2
 972 0045 3A000000 		.4byte	.LVL3
 973 0049 0200     		.2byte	0x2
 974 004b 31       		.byte	0x31
 975 004c 9F       		.byte	0x9f
 976 004d 3A000000 		.4byte	.LVL3
 977 0051 3C000000 		.4byte	.LVL4
 978 0055 0200     		.2byte	0x2
 979 0057 30       		.byte	0x30
 980 0058 9F       		.byte	0x9f
 981 0059 3C000000 		.4byte	.LVL4
 982 005d 4A000000 		.4byte	.LVL5
 983 0061 0100     		.2byte	0x1
 984 0063 53       		.byte	0x53
 985 0064 50000000 		.4byte	.LVL6
 986 0068 52000000 		.4byte	.LVL7
 987 006c 0200     		.2byte	0x2
 988 006e 31       		.byte	0x31
 989 006f 9F       		.byte	0x9f
 990 0070 52000000 		.4byte	.LVL7
 991 0074 74000000 		.4byte	.LVL8
 992 0078 0100     		.2byte	0x1
 993 007a 53       		.byte	0x53
 994 007b 74000000 		.4byte	.LVL8
 995 007f 76000000 		.4byte	.LVL9
 996 0083 0200     		.2byte	0x2
 997 0085 30       		.byte	0x30
 998 0086 9F       		.byte	0x9f
 999 0087 76000000 		.4byte	.LVL9
 1000 008b 8C000000 		.4byte	.LVL10
 1001 008f 0100     		.2byte	0x1
 1002 0091 53       		.byte	0x53
 1003 0092 AC000000 		.4byte	.LVL11
 1004 0096 C0000000 		.4byte	.LVL12
 1005 009a 0100     		.2byte	0x1
 1006 009c 53       		.byte	0x53
 1007 009d CE000000 		.4byte	.LVL13
 1008 00a1 D2000000 		.4byte	.LVL14
 1009 00a5 0200     		.2byte	0x2
 1010 00a7 31       		.byte	0x31
 1011 00a8 9F       		.byte	0x9f
 1012 00a9 D2000000 		.4byte	.LVL14
 1013 00ad 32010000 		.4byte	.LVL17
 1014 00b1 0100     		.2byte	0x1
 1015 00b3 53       		.byte	0x53
 1016 00b4 36010000 		.4byte	.LVL18
 1017 00b8 3C010000 		.4byte	.LVL19
 1018 00bc 0200     		.2byte	0x2
 1019 00be 31       		.byte	0x31
 1020 00bf 9F       		.byte	0x9f
 1021 00c0 3C010000 		.4byte	.LVL19
 1022 00c4 A8010000 		.4byte	.LVL25
 1023 00c8 0100     		.2byte	0x1
 1024 00ca 53       		.byte	0x53
 1025 00cb EE010000 		.4byte	.LVL26
ARM GAS  C:\Users\Zeus\AppData\Local\Temp\cc6O8YAn.s 			page 34


 1026 00cf F2010000 		.4byte	.LVL27
 1027 00d3 0200     		.2byte	0x2
 1028 00d5 31       		.byte	0x31
 1029 00d6 9F       		.byte	0x9f
 1030 00d7 F2010000 		.4byte	.LVL27
 1031 00db 56020000 		.4byte	.LVL28
 1032 00df 0100     		.2byte	0x1
 1033 00e1 53       		.byte	0x53
 1034 00e2 5C020000 		.4byte	.LVL29
 1035 00e6 5E020000 		.4byte	.LVL30
 1036 00ea 0200     		.2byte	0x2
 1037 00ec 31       		.byte	0x31
 1038 00ed 9F       		.byte	0x9f
 1039 00ee 5E020000 		.4byte	.LVL30
 1040 00f2 68020000 		.4byte	.LVL31
 1041 00f6 0100     		.2byte	0x1
 1042 00f8 53       		.byte	0x53
 1043 00f9 B0020000 		.4byte	.LVL32
 1044 00fd B2020000 		.4byte	.LVL33
 1045 0101 0100     		.2byte	0x1
 1046 0103 53       		.byte	0x53
 1047 0104 00000000 		.4byte	0
 1048 0108 00000000 		.4byte	0
 1049              		.section	.debug_aranges,"",%progbits
 1050 0000 1C000000 		.4byte	0x1c
 1051 0004 0200     		.2byte	0x2
 1052 0006 00000000 		.4byte	.Ldebug_info0
 1053 000a 04       		.byte	0x4
 1054 000b 00       		.byte	0
 1055 000c 0000     		.2byte	0
 1056 000e 0000     		.2byte	0
 1057 0010 00000000 		.4byte	.LFB1
 1058 0014 74030000 		.4byte	.LFE1-.LFB1
 1059 0018 00000000 		.4byte	0
 1060 001c 00000000 		.4byte	0
 1061              		.section	.debug_ranges,"",%progbits
 1062              	.Ldebug_ranges0:
 1063 0000 00000000 		.4byte	.LFB1
 1064 0004 74030000 		.4byte	.LFE1
 1065 0008 00000000 		.4byte	0
 1066 000c 00000000 		.4byte	0
 1067              		.section	.debug_line,"",%progbits
 1068              	.Ldebug_line0:
 1069 0000 62010000 		.section	.debug_str,"MS",%progbits,1
 1069      02006C00 
 1069      00000201 
 1069      FB0E0D00 
 1069      01010101 
 1070              	.LASF15:
 1071 0000 72656733 		.ascii	"reg32\000"
 1071      3200
 1072              	.LASF26:
 1073 0006 4932435F 		.ascii	"I2C_1_mstrRdBufIndex\000"
 1073      315F6D73 
 1073      74725264 
 1073      42756649 
 1073      6E646578 
ARM GAS  C:\Users\Zeus\AppData\Local\Temp\cc6O8YAn.s 			page 35


 1074              	.LASF23:
 1075 001b 4932435F 		.ascii	"I2C_1_mstrControl\000"
 1075      315F6D73 
 1075      7472436F 
 1075      6E74726F 
 1075      6C00
 1076              	.LASF27:
 1077 002d 4932435F 		.ascii	"I2C_1_mstrWrBufPtr\000"
 1077      315F6D73 
 1077      74725772 
 1077      42756650 
 1077      747200
 1078              	.LASF3:
 1079 0040 73686F72 		.ascii	"short unsigned int\000"
 1079      7420756E 
 1079      7369676E 
 1079      65642069 
 1079      6E7400
 1080              	.LASF19:
 1081 0053 656E6454 		.ascii	"endTransfer\000"
 1081      72616E73 
 1081      66657200 
 1082              	.LASF13:
 1083 005f 646F7562 		.ascii	"double\000"
 1083      6C6500
 1084              	.LASF28:
 1085 0066 4932435F 		.ascii	"I2C_1_mstrWrBufSize\000"
 1085      315F6D73 
 1085      74725772 
 1085      42756653 
 1085      697A6500 
 1086              	.LASF12:
 1087 007a 666C6F61 		.ascii	"float\000"
 1087      7400
 1088              	.LASF32:
 1089 0080 47656E65 		.ascii	"Generated_Source\\PSoC4\\I2C_1_I2C_INT.c\000"
 1089      72617465 
 1089      645F536F 
 1089      75726365 
 1089      5C50536F 
 1090              	.LASF1:
 1091 00a7 756E7369 		.ascii	"unsigned char\000"
 1091      676E6564 
 1091      20636861 
 1091      7200
 1092              	.LASF31:
 1093 00b5 474E5520 		.ascii	"GNU C 4.9.3 20150303 (release) [ARM/embedded-4_9-br"
 1093      4320342E 
 1093      392E3320 
 1093      32303135 
 1093      30333033 
 1094 00e8 616E6368 		.ascii	"anch revision 221220] -mcpu=cortex-m0plus -mthumb -"
 1094      20726576 
 1094      6973696F 
 1094      6E203232 
 1094      31323230 
 1095 011b 67202D4F 		.ascii	"g -Og -ffunction-sections -ffat-lto-objects\000"
ARM GAS  C:\Users\Zeus\AppData\Local\Temp\cc6O8YAn.s 			page 36


 1095      67202D66 
 1095      66756E63 
 1095      74696F6E 
 1095      2D736563 
 1096              	.LASF5:
 1097 0147 6C6F6E67 		.ascii	"long unsigned int\000"
 1097      20756E73 
 1097      69676E65 
 1097      6420696E 
 1097      7400
 1098              	.LASF18:
 1099 0159 64696666 		.ascii	"diffCount\000"
 1099      436F756E 
 1099      7400
 1100              	.LASF9:
 1101 0163 75696E74 		.ascii	"uint8\000"
 1101      3800
 1102              	.LASF33:
 1103 0169 433A5C55 		.ascii	"C:\\Users\\Zeus\\Documents\\PSoC Creator\\CE211252_"
 1103      73657273 
 1103      5C5A6575 
 1103      735C446F 
 1103      63756D65 
 1104 0197 416D6269 		.ascii	"Ambient_Light_Sensing\\CE211252_Ambient_Light_Sensi"
 1104      656E745F 
 1104      4C696768 
 1104      745F5365 
 1104      6E73696E 
 1105 01c9 6E672E63 		.ascii	"ng.cydsn\000"
 1105      7964736E 
 1105      00
 1106              	.LASF30:
 1107 01d2 4932435F 		.ascii	"I2C_1_mstrWrBufIndexTmp\000"
 1107      315F6D73 
 1107      74725772 
 1107      42756649 
 1107      6E646578 
 1108              	.LASF10:
 1109 01ea 75696E74 		.ascii	"uint16\000"
 1109      313600
 1110              	.LASF11:
 1111 01f1 75696E74 		.ascii	"uint32\000"
 1111      333200
 1112              	.LASF21:
 1113 01f8 4932435F 		.ascii	"I2C_1_state\000"
 1113      315F7374 
 1113      61746500 
 1114              	.LASF8:
 1115 0204 756E7369 		.ascii	"unsigned int\000"
 1115      676E6564 
 1115      20696E74 
 1115      00
 1116              	.LASF7:
 1117 0211 6C6F6E67 		.ascii	"long long unsigned int\000"
 1117      206C6F6E 
 1117      6720756E 
 1117      7369676E 
ARM GAS  C:\Users\Zeus\AppData\Local\Temp\cc6O8YAn.s 			page 37


 1117      65642069 
 1118              	.LASF22:
 1119 0228 4932435F 		.ascii	"I2C_1_mstrStatus\000"
 1119      315F6D73 
 1119      74725374 
 1119      61747573 
 1119      00
 1120              	.LASF16:
 1121 0239 63796973 		.ascii	"cyisraddress\000"
 1121      72616464 
 1121      72657373 
 1121      00
 1122              	.LASF17:
 1123 0246 73697A65 		.ascii	"sizetype\000"
 1123      74797065 
 1123      00
 1124              	.LASF6:
 1125 024f 6C6F6E67 		.ascii	"long long int\000"
 1125      206C6F6E 
 1125      6720696E 
 1125      7400
 1126              	.LASF14:
 1127 025d 63686172 		.ascii	"char\000"
 1127      00
 1128              	.LASF24:
 1129 0262 4932435F 		.ascii	"I2C_1_mstrRdBufPtr\000"
 1129      315F6D73 
 1129      74725264 
 1129      42756650 
 1129      747200
 1130              	.LASF2:
 1131 0275 73686F72 		.ascii	"short int\000"
 1131      7420696E 
 1131      7400
 1132              	.LASF20:
 1133 027f 4932435F 		.ascii	"I2C_1_customIntrHandler\000"
 1133      315F6375 
 1133      73746F6D 
 1133      496E7472 
 1133      48616E64 
 1134              	.LASF29:
 1135 0297 4932435F 		.ascii	"I2C_1_mstrWrBufIndex\000"
 1135      315F6D73 
 1135      74725772 
 1135      42756649 
 1135      6E646578 
 1136              	.LASF4:
 1137 02ac 6C6F6E67 		.ascii	"long int\000"
 1137      20696E74 
 1137      00
 1138              	.LASF0:
 1139 02b5 7369676E 		.ascii	"signed char\000"
 1139      65642063 
 1139      68617200 
 1140              	.LASF25:
 1141 02c1 4932435F 		.ascii	"I2C_1_mstrRdBufSize\000"
 1141      315F6D73 
ARM GAS  C:\Users\Zeus\AppData\Local\Temp\cc6O8YAn.s 			page 38


 1141      74725264 
 1141      42756653 
 1141      697A6500 
 1142              	.LASF34:
 1143 02d5 4932435F 		.ascii	"I2C_1_I2C_ISR\000"
 1143      315F4932 
 1143      435F4953 
 1143      5200
 1144              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 4.9.3 20150303 (release) [ARM/embedded-4_9-br
